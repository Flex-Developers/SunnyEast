@page "/forgot-password"
@using System.Text.RegularExpressions
@using Application.Contract.Verification.Commands
@using Client.Infrastructure.Services.Account
@using Client.Infrastructure.Services.Verification
@using Severity = MudBlazor.Severity

@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IAccountService AccountService
@inject IVerificationClient VerifyClient

@if (!_verified)
{
    <!-- Шаг 1: ввод почты/телефона (как на Login) -->
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudPaper Class="pa-4" Elevation="6" @onkeyup="OnKeyUpStep1">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Сброс пароля</MudText>

                <MudTextField T="string"
                              Value="_loginInput"
                              ValueChanged="@( (string? v) => OnLoginChanged(v))"
                              ValueExpression="@(()=> _loginInput)"
                              Label="Почта или телефон"
                              Variant="Variant.Outlined"
                              InputType="InputType.Text"
                              Immediate="true"
                              OnBlur="NormalizeLoginInput"
                              OnKeyUp="OnKeyUpStep1"
                              Error="@(!_isValidLogin)"
                              Required="true"
                              ErrorText="@_loginError"
                              FullWidth />



                <MudText Typo="Typo.caption">
                    Введите вашу почту или номер телефона — мы пришлём код подтверждения.
                </MudText>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="@(_isSubmitting || !_isValidLogin)"
                           OnClick="SendCode">
                    @if (_isSubmitting)
                    {
                        <text>Отправляем…</text>
                    }
                    else
                    {
                        <text> Отправить код </text>
                    }

                </MudButton>

                @if (_isSubmitting)
                {
                    <MudProgressLinear Indeterminate="true" Class="mt-2" Color="Color.Primary"/>
                }
            </MudStack>
        </MudPaper>
    </MudContainer>
}
else
{
    <!-- Шаг 2: новый пароль (поведение как в Register) -->
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudPaper Class="pa-4" Elevation="6" @onkeyup="OnKeyUpStep2">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Новый пароль</MudText>

                <MudTextField @bind-Value="_newPwd"
                              InputType="@_pwdInputType"
                              Variant="Variant.Outlined"
                              Label="Новый пароль"
                              Immediate="true"
                              HelperText="Минимум 8 символов, строчная, прописная буква и цифра"
                              Error="@(!IsStrong(_newPwd) && !string.IsNullOrEmpty(_newPwd))"
                              ErrorText="Пароль слишком простой"
                              Adornment="Adornment.End"
                              AdornmentIcon="@_pwdIcon"
                              OnAdornmentClick="TogglePwdVisibility" />

                <MudTextField @bind-Value="_confirm"
                              InputType="@_pwdInputType"
                              Variant="Variant.Outlined"
                              Label="Повторите пароль"
                              Immediate="true"
                              Error="@(!string.IsNullOrEmpty(_confirm) && _newPwd != _confirm)"
                              ErrorText="Пароли не совпадают"
                              Adornment="Adornment.End"
                              AdornmentIcon="@_pwdIcon"
                              OnAdornmentClick="TogglePwdVisibility" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Disabled="@(_saving || !IsStrong(_newPwd) || _newPwd != _confirm)"
                           OnClick="SavePwd">
                    @if (_saving)
                    {
                        <text>Сохраняем…</text>
                    } 
                    else
                    {
                        <text>Сохранить</text>
                    }
                </MudButton>

                @if (_saving)
                {
                    <MudProgressLinear Indeterminate="true" Class="mt-2" Color="Color.Success"/>
                }
            </MudStack>
        </MudPaper>
    </MudContainer>
}

@code {
    // ── общие состояния ─────────────────────────────────────────────────────────
    private bool _verified;          // пришли из /verify
    private string? _sessionId;      // sid из query

    protected override void OnInitialized()
    {
        var pr = System.Web.HttpUtility.ParseQueryString(new Uri(Nav.Uri).Query);
        _sessionId = pr["sid"];
        _verified  = pr["verified"] == "1";
    }

    // ── Шаг 1: поле «Почта или телефон» (как на Login) ─────────────────────────
    private string? _loginInput;
    private bool _isSubmitting;
    private bool _isValidLogin = true;
    private string _loginError = "Почта или телефон не могут быть пустыми.";
    
    private void OnLoginChanged(string? value)
    {
        _loginInput = value ?? string.Empty;
        QuickValidateLogin();   // включает кнопку без потери фокуса
    }

    private void QuickValidateLogin()
    {
        var v = _loginInput ?? string.Empty;

        if (string.IsNullOrWhiteSpace(v))
        {
            _isValidLogin = false;
            _loginError = "Поле не может быть пустым.";
            return;
        }

        if (Regex.IsMatch(v, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            _isValidLogin = true;
            _loginError = string.Empty;
            return;
        }

        var digits = Regex.Replace(v, @"\D", "");
        var ok = (digits.Length == 11 && (digits.StartsWith("7") || digits.StartsWith("8")))
                 || (digits.Length == 10 && digits.StartsWith("9"));
        _isValidLogin = ok;
        _loginError = ok ? string.Empty : "Введите корректный email или номер телефона.";
    }

    private void NormalizeLoginInput()
    {
        _isValidLogin = false;
        _loginError = string.Empty;

        if (string.IsNullOrWhiteSpace(_loginInput))
        {
            _isValidLogin = false;
            _loginError = "Поле не может быть пустым.";
            return;
        }

        // e-mail?
        if (Regex.IsMatch(_loginInput, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            _isValidLogin = true;
            return;
        }

        // телефон?
        if (IsPhoneNumber(_loginInput, out var normalized))
        {
            _loginInput = normalized; // перезапишем в +7-XXX-XXX-XX-XX
            _isValidLogin = true;
        }
        else
        {
            _isValidLogin = false;
            _loginError = "Введите корректный email или номер телефона.";
        }

        static bool IsPhoneNumber(string input, out string result)
        {
            var digits = Regex.Replace(input, @"\D", "");
            if (digits.Length == 11 && (digits.StartsWith("8") || digits.StartsWith("7")))
            {
                if (digits.StartsWith("8")) digits = "7" + digits[1..];
            }
            else if (digits.Length == 10 && digits.StartsWith("9"))
            {
                digits = "7" + digits;
            }
            else
            {
                result = input;
                return false;
            }

            result = Regex.Replace(digits, @"^7(\d{3})(\d{3})(\d{2})(\d{2})$", "+7-$1-$2-$3-$4");
            return true;
        }
    }

    private async Task OnKeyUpStep1(KeyboardEventArgs e)
    {
        if (_isSubmitting) return;

        var isEnter = e is not null &&
                      (e.Key is "Enter" or "NumpadEnter" || e.Code == "Enter") &&
                      !e.ShiftKey && !e.CtrlKey && !e.AltKey && !e.MetaKey;

        if (isEnter)
            await SendCode();
    }

    private async Task SendCode()
    {
        NormalizeLoginInput();
        if (!_isValidLogin) return;

        _isSubmitting = true;
        var email = _loginInput!.Contains('@') ? _loginInput : null;
        var phone = email is null ? _loginInput : null;

        try
        {
            var start = await VerifyClient.StartAsync(new StartVerificationCommand
            {
                Purpose = "reset",
                Email = email,
                Phone = phone
            });

            var channel = start.Selected.ToString();
            var toRaw   = channel == "email" ? start.MaskedEmail : start.MaskedPhone;
            var to      = Uri.EscapeDataString(toRaw ?? "");

            // после verify возвращаемся сюда на шаг-2
            var returnUrl = Uri.EscapeDataString($"/forgot-password?sid={start.SessionId}&verified=1");
            Nav.NavigateTo($"/verify?purpose=reset&channel={channel}&to={to}&title=Сброс%20пароля&len={start.CodeLength}&sid={start.SessionId}&returnUrl={returnUrl}");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    // ── Шаг 2: ввод нового пароля (как на Register) ────────────────────────────
    private string _newPwd = "", _confirm = "";
    private bool _saving;
    private bool _pwdVisible;
    private InputType _pwdInputType = InputType.Password;
    private string _pwdIcon = Icons.Material.Filled.VisibilityOff;

    private static bool IsStrong(string s) =>
        !string.IsNullOrEmpty(s) &&
        s.Length >= 8 &&
        s.Any(char.IsLower) &&
        s.Any(char.IsUpper) &&
        s.Any(char.IsDigit);

    private void TogglePwdVisibility()
    {
        _pwdVisible = !_pwdVisible;
        _pwdInputType = _pwdVisible ? InputType.Text : InputType.Password;
        _pwdIcon = _pwdVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private async Task OnKeyUpStep2(KeyboardEventArgs e)
    {
        if (_saving) return;

        var isEnter = e is not null &&
                      (e.Key is "Enter" or "NumpadEnter" || e.Code == "Enter") &&
                      !e.ShiftKey && !e.CtrlKey && !e.AltKey && !e.MetaKey;

        if (isEnter && IsStrong(_newPwd) && _newPwd == _confirm)
            await SavePwd();
    }

    private async Task SavePwd()
    {
        if (string.IsNullOrWhiteSpace(_sessionId))
        {
            Snackbar.Add("Сессия не найдена.", Severity.Error);
            return;
        }

        _saving = true;
        try
        {
            var ok = await AccountService.ResetPasswordAsync(_sessionId!, _newPwd, _confirm);
            if (ok)
            {
                Snackbar.Add("Пароль изменён. Войдите с новым паролем.", Severity.Success);
                Nav.NavigateTo("/login");
            }
            else
            {
                Snackbar.Add("Не удалось изменить пароль.", Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
}
