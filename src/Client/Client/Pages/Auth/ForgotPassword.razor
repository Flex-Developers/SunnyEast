@page "/forgot-password"
@using System.Text.RegularExpressions
@using Application.Contract.Verification.Commands
@using Client.Infrastructure.Services.Account
@using Client.Infrastructure.Services.Verification
@using Severity = MudBlazor.Severity

@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IAccountService AccountService
@inject IVerificationClient VerifyClient

@if (!_verified)
{
    <!-- Шаг 1: ввод почты/телефона -->
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudPaper Class="pa-4" Elevation="6">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Сброс пароля</MudText>
                <MudTextField @bind-Value="_login"
                              Label="Почта или телефон"
                              Immediate="true"
                              OnBlur="@Normalize"
                              Error="@_invalidLogin"
                              ErrorText="Введите корректный e-mail или телефон"/>
                <MudText Typo="Typo.caption">
                    Введите вашу почту или номер телефона. Мы отправим код подтверждения для сброса пароля.
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Disabled="@_isSubmitting"
                           OnClick="SendCode">Отправить код
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudContainer>
}
else
{
    <!-- Шаг 2: новый пароль -->
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudPaper Class="pa-4" Elevation="6">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Новый пароль</MudText>

                <MudTextField @bind-Value="_newPwd"
                              InputType="InputType.Password"
                              Label="Новый пароль" Immediate="true"/>
                <MudTextField @bind-Value="_confirm"
                              InputType="InputType.Password"
                              Label="Повторите пароль" Immediate="true"
                              Error="@(!string.IsNullOrEmpty(_confirm) && _newPwd != _confirm)"
                              ErrorText="Пароли не совпадают"/>

                <MudButton Variant="Variant.Filled" Color="Color.Success"
                           Disabled="@(_saving || _newPwd.Length<8 || _newPwd!=_confirm)"
                           OnClick="SavePwd">Сохранить
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudContainer>
}

@code {
    
    // ───────── состояние ─────────
    private string? _login; // почта или телефон
    private bool _verified; // прошёл ли код
    private string? _sessionId; // из query
    private bool _isSubmitting;

    // step-2
    private string _newPwd = "", _confirm = "";
    private bool _saving;

    protected override void OnInitialized()
    {
        var q = new Uri(Nav.Uri).Query;
        var pr = System.Web.HttpUtility.ParseQueryString(q);
        _sessionId = pr["sid"];
        _verified = pr["verified"] == "1";
    }

    // ───────── UI ─────────
    private bool _invalidLogin;

    private void Normalize()
    {
        _invalidLogin = false;
        if (string.IsNullOrWhiteSpace(_login))
        {
            _invalidLogin = true;
            return;
        }

        if (Regex.IsMatch(_login, @"^[^@\s]+@[^@\s]+\.[^@\s]+$")) return; // mail ok

        // try phone
        var digits = Regex.Replace(_login, @"\D", "");
        if (digits.Length == 11 && "78".Contains(digits[0]))
            digits = "7" + digits[1..];
        else if (digits.Length == 10 && digits.StartsWith("9"))
            digits = "7" + digits;
        else
        {
            _invalidLogin = true;
            return;
        }

        _login = Regex.Replace(digits, @"^7(\d{3})(\d{3})(\d{2})(\d{2})$", "+7-$1-$2-$3-$4");
    }

    private async Task SendCode()
    {
        Normalize();
        if (_invalidLogin) return;

        _isSubmitting = true;
        var email = _login!.Contains('@') ? _login : null;
        var phone = email is null ? _login : null;

        try
        {
            // запускаем верификацию
            var start = await VerifyClient.StartAsync(new StartVerificationCommand
            {
                Purpose = "reset",
                Email = email,
                Phone = phone
            });

            var channel = start.Selected.ToString();
            var toRaw = channel == "email" ? start.MaskedEmail : start.MaskedPhone;
            var to = Uri.EscapeDataString(toRaw ?? "");

            // redirect на Verify → возврат сюда
            var returnUrl = Uri.EscapeDataString($"/forgot-password?sid={start.SessionId}&verified=1");
            Navigation.NavigateTo($"/verify?purpose=reset&channel={channel}&to={to}&title=Сброс%20пароля&len={start.CodeLength}&sid={start.SessionId}&returnUrl={returnUrl}", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task SavePwd()
    {
        if (_sessionId is null)
        {
            Snackbar.Add("Сессия не найдена.", Severity.Error);
            return;
        }

        _saving = true;
        try
        {
            var ok = await AccountService.ResetPasswordAsync(_sessionId, _newPwd, _confirm);
            if (ok)
            {
                Snackbar.Add("Пароль изменён. Войдите с новым паролем.", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else Snackbar.Add("Не удалось изменить пароль.", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

}
