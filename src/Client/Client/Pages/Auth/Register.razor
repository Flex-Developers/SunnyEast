@page "/Register"
@using System.Text.RegularExpressions
@using Application.Contract.User.Commands
@using Application.Contract.Verification.Commands
@using Blazored.LocalStorage
@using Client.Infrastructure.Services.Auth
@using Client.Infrastructure.Services.Verification
@using Client.Infrastructure.Services.Verification.Register
@using Severity = MudBlazor.Severity

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IRegistrationDraftService DraftService
@inject IVerificationClient VerificationClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<MudContainer Class="register-container">
    <MudPaper Class="register-paper rounded pa-4 shadow-md" Elevation="3" @onkeyup="OnFormKeyUpAsync">
        <MudForm Model="_user" @ref="_form" Validation="@(_userValidator.ValidateValue)" ValidationDelay="0"
                 Class="register-form d-flex flex-column gap-0">

            <MudCardHeader Class="text-center justify-center align-center">
                <MudText Typo="Typo.h4" Align="Align.Center" Class="centered-text">Регистрация</MudText>
            </MudCardHeader>

            <MudTextField @bind-Value="_user.Name"
                          Label="Имя"
                          For="() => _user.Name"
                          Variant="Variant.Outlined"
                          Immediate="true"
                          OnKeyUp="OnFormKeyUpAsync"/>

            <MudTextField @bind-Value="_user.Surname"
                          Label="Фамилия"
                          For="() => _user.Surname"
                          Variant="Variant.Outlined"
                          Immediate="true"
                          OnKeyUp="OnFormKeyUpAsync"/>

            <MudTextField T="string"
                          @bind-Value="_user.PhoneNumber" @bind-Value:event="oninput"
                          ValueChanged="@(v =>
                                        {
                                            _user.PhoneNumber = v ?? string.Empty;
                                            _isContactEmpty = !IsContactProvided;
                                        })"
                          Label="Номер телефона"
                          For="() => _user.PhoneNumber!"
                          Variant="Variant.Outlined"
                          Immediate="true"
                          InputType="InputType.Telephone"
                          Mask="@(new PatternMask("000-000-00-00"))"
                          Adornment="Adornment.Start"
                          AdornmentText="+7"
                          InputAttributes="@(new Dictionary<string, object>
                                           {
                                               ["inputmode"] = "numeric",
                                               ["dir"] = "ltr",
                                               ["autocomplete"] = "tel",
                                               ["autocorrect"] = "off",
                                               ["autocapitalize"] = "off"
                                           })"/>


            <MudTextField T="string"
                          @bind-Value="_user.Email" @bind-Value:event="oninput"
                          ValueChanged="@(v =>
                                        {
                                            _user.Email = v ?? string.Empty;
                                            _isContactEmpty = !IsContactProvided;
                                        })"
                          Label="Электронная почта"
                          For="() => _user.Email!"
                          Variant="Variant.Outlined"
                          Immediate="true"
                          InputType="InputType.Email"
                          InputAttributes="@(new Dictionary<string, object>
                                           {
                                               ["inputmode"] = "email",
                                               ["dir"] = "ltr",
                                               ["autocomplete"] = "email",
                                               ["autocorrect"] = "off",
                                               ["autocapitalize"] = "off"
                                           })"/>

            <MudTextField @bind-Value="_user.Password"
                          Label="Пароль"
                          For="@(() => _user.Password)"
                          Variant="Variant.Outlined"
                          InputType="@_passwordInput"
                          OnKeyUp="OnFormKeyUpAsync"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"/>

            <MudTextField @bind-Value="_user.ConfirmPassword"
                          Label="Подтвердите пароль"
                          For="@(() => _user.ConfirmPassword)"
                          Variant="Variant.Outlined"
                          InputType="@_passwordInput"
                          OnKeyUp="OnFormKeyUpAsync"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"/>

            <MudCheckBox @bind-Value="_agreeForPersonalDataProcessing"
                         Label="Согласен с обработкой данных."
                         Style="margin-left: -13px"
                         Color="Color.Primary"/>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="register-button"
                       Disabled="@(!_agreeForPersonalDataProcessing || _isSubmitting)"
                       @onclick="SubmitRegisterAsync">
                Зарегистрироваться
            </MudButton>

            @if (_isSubmitting)
            {
                <MudProgressLinear Indeterminate="true" Class="mt-2" Color="Color.Primary"/>
            }

            <MudCardActions Class="d-flex flex-column align-center">
                <MudText Typo="Typo.body2" Style="padding-top: 20px">Уже регистрировались?</MudText>
                <MudLink Style="padding-top: 10px; margin-bottom: -10px" Class="text-primary" OnClick="NavigateToLogin">
                    Войти
                </MudLink>
            </MudCardActions>

        </MudForm>
    </MudPaper>
</MudContainer>

@code
{
    // ======== Константы текстов ========
    private const string MsgFillFormProperly = "Правильно заполните данные!";
    private const string MsgConfirmPersonalData = "Подтвердите согласие на обработку данных.";
    private const string MsgPhoneTaken = "Телефон уже занят. Выполните вход.";
    private const string MsgEmailTaken = "Почта уже занята. Выполните вход.";

    // ======== Поля состояния ========
    private MudForm _form = default!;
    private readonly RegisterUserValidator _userValidator = new();

    private RegisterUserCommand _user = new()
    {
        Name = "",
        Surname = "",
        PhoneNumber = "",
        Email = "",
        Password = "",
        ConfirmPassword = ""
    };

    private bool _isSubmitting;
    private bool _agreeForPersonalDataProcessing;
    private bool _isPasswordVisible;
    private bool _isContactEmpty;

    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private readonly string _contactRequiredMessage = "Номер телефона или почта должны быть заполнены.";

    // ======== Вычисляемые свойства ========
    private bool IsContactProvided => !string.IsNullOrWhiteSpace(_user.PhoneNumber) || !string.IsNullOrWhiteSpace(_user.Email);

    // ======== Обработчики формы ========
    private async Task SubmitRegisterAsync()
    {
        if (_isSubmitting)
            return;

        try
        {
            _isSubmitting = true;

            await _form.Validate();
            ValidateContactChoice();

            if (!_form.IsValid || _isContactEmpty)
            {
                ShowSnack(MsgFillFormProperly, Severity.Warning);
                return;
            }

            if (!await CheckAvailabilityAsync())
                return;

            await StartVerificationAsync();
        }
        catch (Exception ex)
        {
            ShowSnack(ex.Message, Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task OnFormKeyUpAsync(KeyboardEventArgs e)
    {
        if (_isSubmitting)
            return;

        var isPlainEnter = e is not null
                           && (e.Key is "Enter" or "NumpadEnter" || e.Code == "Enter")
                           && !e.ShiftKey && !e.CtrlKey && !e.AltKey && !e.MetaKey;

        if (!isPlainEnter)
            return;

        if (!_agreeForPersonalDataProcessing)
        {
            ShowSnack(MsgConfirmPersonalData, Severity.Warning);
            return;
        }

        await SubmitRegisterAsync();
    }

    // ======== Хелперы: проверка и запуск верификации ========
    private void ValidateContactChoice()
    {
        _isContactEmpty = !IsContactProvided;
        StateHasChanged();
    }

    private void OnPhoneChanged(string phone)
    {
        _user.PhoneNumber = phone;
        _isContactEmpty = !IsContactProvided;
    }

    private void OnEmailChanged(string email)
    {
        _user.Email = email;
        _isContactEmpty = !IsContactProvided;
    }

    private async Task<bool> CheckAvailabilityAsync()
    {
        var phone = string.IsNullOrWhiteSpace(_user.PhoneNumber) ? null : $"+7-{_user.PhoneNumber}";
        var availability = await VerificationClient.CheckAvailabilityAsync(_user.Email, phone);

        if (!availability.PhoneAvailable && !string.IsNullOrWhiteSpace(_user.PhoneNumber))
        {
            ShowSnack(MsgPhoneTaken, Severity.Error);
            return false;
        }

        if (!availability.EmailAvailable && !string.IsNullOrWhiteSpace(_user.Email))
        {
            ShowSnack(MsgEmailTaken, Severity.Error);
            return false;
        }

        return true;
    }

    private async Task StartVerificationAsync()
    {
        var cmd = new StartVerificationCommand
        {
            Purpose = "register",
            Phone = string.IsNullOrWhiteSpace(_user.PhoneNumber) ? null : $"+7-{_user.PhoneNumber}",
            Email = string.IsNullOrWhiteSpace(_user.Email) ? null : _user.Email
        };

        var start = await VerificationClient.StartAsync(cmd);

        DraftService.SetPassword(_user.Password, _user.ConfirmPassword);

        var publicPart = new RegisterUserCommand
        {
            Name = _user.Name,
            Surname = _user.Surname,
            PhoneNumber = _user.PhoneNumber,
            Email = _user.Email,
            Password = "", ConfirmPassword = "" // намеренно пусто
        };
        await DraftService.SavePublicAsync(publicPart);

        // канал выбран сервером; подставляем соответствующее «кому»
        var channel = start.Selected.ToString(); // "phone" | "email"
        var toRaw = channel == "email" ? start.MaskedEmail : start.MaskedPhone;
        var to = Uri.EscapeDataString(toRaw ?? "");

        var title = Uri.EscapeDataString("Подтверждение регистрации");
        var returnUrl = Uri.EscapeDataString("/");
        Navigation.NavigateTo(
            $"/verify?purpose=register&channel={channel}&to={to}&title={title}&len={start.CodeLength}&sid={start.SessionId}&returnUrl={returnUrl}",
            replace: true);
    }

    // ======== Хелперы UI ========
    private void TogglePasswordVisibility()
    {
        _isPasswordVisible = !_isPasswordVisible;
        _passwordInputIcon = _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        _passwordInput = _isPasswordVisible ? InputType.Text : InputType.Password;
    }

    private void NavigateToLogin() => Navigation.NavigateTo("/login");

    private void ShowSnack(string message, Severity severity) => Snackbar.Add(message, severity);

    // ======== Валидация пароля ========
    public class RegisterUserValidator : AbstractValidator<RegisterUserCommand>
    {
        private static readonly Regex HasUpper = new(@"\p{Lu}", RegexOptions.Compiled);
        private static readonly Regex HasLower = new(@"\p{Ll}", RegexOptions.Compiled);
        private static readonly Regex HasDigit = new(@"\d", RegexOptions.Compiled);

        public RegisterUserValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Имя обязательно.")
                .Matches(@"^[\p{L}]+$").WithMessage("Имя может содержать только буквы.");

            RuleFor(x => x.Surname)
                .Matches(@"^[\p{L}]+$").WithMessage("Фамилия может содержать только буквы.")
                .When(x => !string.IsNullOrWhiteSpace(x.Surname));

            RuleFor(x => x.PhoneNumber)
                .Matches(@"^\d{3}-\d{3}-\d{2}-\d{2}$").WithMessage("Некорректный формат номера телефона.")
                .When(x => !string.IsNullOrWhiteSpace(x.PhoneNumber));

            RuleFor(x => x.Email)
                .EmailAddress().WithMessage("Некорректный формат электронной почты.")
                .When(x => !string.IsNullOrWhiteSpace(x.Email));

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Пароль обязателен.")
                .MinimumLength(8).WithMessage("Пароль должен содержать минимум 8 символов.")
                .Matches(HasUpper).WithMessage("Пароль должен содержать минимум одну заглавную букву.")
                .Matches(HasLower).WithMessage("Пароль должен содержать минимум одну строчную букву.")
                .Matches(HasDigit).WithMessage("Пароль должен содержать минимум одну цифру.");

            RuleFor(x => x.ConfirmPassword)
                .NotEmpty().WithMessage("Подтверждение пароля обязательно.")
                .Equal(x => x.Password).WithMessage("Пароли должны совпадать.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<RegisterUserCommand>
                .CreateWithOptions((RegisterUserCommand)model, x => x.IncludeProperties(propertyName)));

            return result.IsValid ? [] : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 90vh;
    }

    .register-paper {
        width: 400px;
        padding: 20px;
    }

    .register-form {
        display: flex;
        flex-direction: column;
    }

    .register-button {
        margin-top: 5px;
    }

    .centered-text {
        text-align: center;
    }
</style>
