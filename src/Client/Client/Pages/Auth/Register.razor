@page "/Register"
@using Application.Contract.User.Commands
@using Client.Infrastructure.Services.HttpClient

@inject IHttpClientService HttpClient

<MudContainer Class="register-container">
    <MudPaper Class="register-paper" Elevation="3">
        <MudForm Class="register-form">
            <MudTextField Label="Имя" Required="true" Variant="Variant.Filled" @bind-Value="user.Name" />
            <MudTextField Label="Фамилия" Required="true" Variant="Variant.Filled" @bind-Value="user.Surname" />
            <MudTextField Label="Отчество" Variant="Variant.Filled" @bind-Value="user.Patronymic" />
            <MudTextField Label="Номер телефона" Required="true" Variant="Variant.Filled" @bind-Value="user.Phone" />
            <MudTextField Label="Электронная почта" Required="true" Variant="Variant.Filled" @bind-Value="user.Email" />
            <MudTextField Label="Имя пользователя" Required="true" Variant="Variant.Filled" @bind-Value="user.UserName" />

            <MudTextField Label="Пароль" Required="true" Variant="Variant.Filled" @bind-Value="user.Password" InputType="InputType.Password" Immediate="true" />
            <MudTextField Label="Подтверждение пароля" Required="true" Variant="Variant.Filled" @bind-Value="_confirmPassword" InputType="InputType.Password" Immediate="true"  />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="register-button" @onclick="SubmitRegister">Зарегистрироваться</MudButton>
            
            @if (_errorMessage != null)
            {
                <div class="error-message">@_errorMessage</div>
            }
        </MudForm>
    </MudPaper>
</MudContainer>

@code {

    RegisterUserCommand user = new()
    {
        Name = "",
        Surname = "",
        Patronymic = "",
        Phone = "",
        Email = "",
        UserName = "",
        Password = ""
    };
    
    private string _confirmPassword;
    private string _errorMessage;
    
    private async Task SubmitRegister()
    {
        try
        {
            if (string.IsNullOrEmpty(user.Password) || user.Password.Length < 8) // Проверка на длину пароля
            {
                _errorMessage = "Пароль должен содержать не менее 8 символов.";
                return;
            }
            
            if (user.Password != _confirmPassword) // Проверка на совпадение пароля и его подтверждения
            {
                _errorMessage = "Пароль и его подтверждение должны совпадать.";
                return;
            }
            // Оказывается в RegisterHandler уже имеются эти проверки,
            // я их немножко изменил, а эти проверки хочу удалить

            
            // Проверка наличия аккаунта с таким же именем пользователя или адресом электронной почты
            // var response = await HttpClient.GetAsync($"check-username?username={user.UserName}");
            // bool isUsernameExists = response.Success;
            //
            // response = await HttpClient.GetAsync($"check-email?email={user.Email}");
            // bool isEmailExists = response.Success;
            //
            // response = await HttpClient.GetAsync($"check-phone?phone={user.Phone}");
            // bool isPhoneExists = response.Success;
            //
            // if (isUsernameExists)
            // {
            //     _errorMessage = "Пользователь с таким именем пользователя уже существует.";
            //     return;
            // }
            //
            // if (isEmailExists)
            // {
            //     _errorMessage = "Пользователь с таким адресом электронной почты уже существует.";
            //     return;
            // }
            //
            // if (isPhoneExists)
            // {
            //     _errorMessage = "Пользователь с таким телефонным номером уже существует";
            //     return;
            // }
            
            
            // Ниже перечисленные роуты не работают
            // /api/user/register
            // /api/auth/user/register
            // /auth/register
            var response = await HttpClient.PostAsJsonAsync("/auth/register", user);
            _errorMessage = response.Success ? "Успешная регистрация!" : "Ошибка регистрации";
        }
        catch (Exception exception)
        {
            _errorMessage = exception.Message;
        }
    }
}

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .register-paper {
        width: 400px;
        padding: 20px;
    }

    .register-form {
        display: flex;
        flex-direction: column;
    }

    .register-button {
        margin-top: 20px;
    }

    .error-message {
        color: red;
        margin-top: 10px;
    }
</style>