@page "/admin/orders"
@using Application.Contract.Enums
@using Application.Contract.Order.Responses
@using Client.Infrastructure.Services.Order
@using MudBlazor
@using Severity = MudBlazor.Severity
@inject IOrderService OrderService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Заказы</MudText>
    <MudTable Items="_orders" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Номер</MudTh>
            <MudTh>Магазин</MudTh>
            <MudTh>Статус</MudTh>
            <MudTh Class="text-right">Сумма</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Slug</MudTd>
            <MudTd>@context.ShopSlug</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd Class="text-right">@context.Sum ₽</MudTd>
            <MudTd>
                @if (context.Status != OrderStatus.Issued)
                {
                    <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => UpdateAsync(context)">Выдать</MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<OrderResponse> _orders = new();

    protected override async Task OnInitializedAsync()
    {
        _orders = await OrderService.GetAsync(string.Empty);
    }

    private async Task UpdateAsync(OrderResponse order)
    {
        await OrderService.UpdateStatusAsync(order.Slug, OrderStatus.Issued);
        order.Status = OrderStatus.Issued;
        Snackbar.Add("Статус обновлен", Severity.Success);
    }
}
