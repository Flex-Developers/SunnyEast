@page "/admin/orders"
@attribute [Authorize(Roles = "Administrator,Salesman")]
@using Application.Contract.Enums
@using Application.Contract.Order.Responses
@using Client.Components.Common
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Order
@using Microsoft.AspNetCore.Authorization
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject IOrderService OrderService

<MudPaper Class="mx-auto mt-4 pa-4" Style="max-width:1280px">

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
        Список заказов
    </MudText>

    <MudTable Items="_orders"
              Hover="true" Dense="true"
              Bordered="true" FixedHeader="true"
              Breakpoint="Breakpoint.Sm"
              Filter="FilterFunc"
              Class="border rounded-lg">

        <ToolBarContent>
            <MudTextField @bind-Value="_search"
                          Placeholder="Поиск по № заказа / магазину…"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          Class="w-100"/>
        </ToolBarContent>

        <HeaderContent>
            <MudTh SortBy="OrderNumber">Номер</MudTh>
            <MudTh SortBy="ShopSlug">Магазин</MudTh>
            <MudTh SortBy="Status">Статус</MudTh>
            <MudTh SortBy="Sum" Class="text-right">Сумма</MudTh>
            <MudTh Class="text-center" Style="width:220px">Действия</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Номер">@context.OrderNumber</MudTd>
            <MudTd DataLabel="Магазин">@context.ShopSlug</MudTd>
            <MudTd DataLabel="Статус">
                <OrderStatusChip Status="@context.Status"/>
            </MudTd>
            <MudTd DataLabel="Сумма" Class="text-right">@($"{context.Sum:N2} ₽")</MudTd>

            <MudTd DataLabel="Действия" Class="text-center" Style="width:220px">

                @if (context.Status == OrderStatus.Submitted)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small"
                               OnClick="@(() => ChangeStatus(context, OrderStatus.Ready))">
                        Готов
                    </MudButton>

                    <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                               OnClick="@(() => AskCancel(context))">
                        Отменить
                    </MudButton>
                }
                else if (context.Status == OrderStatus.Ready)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small"
                               OnClick="@(() => ChangeStatus(context, OrderStatus.Issued))">
                        Выдать
                    </MudButton>

                    <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                               OnClick="@(() => AskCancel(context))">
                        Отменить
                    </MudButton>
                }
                else
                {
                    <MudText Typo="Typo.caption" Color="Color.Dark">—</MudText>
                }
            </MudTd>
        </RowTemplate>


    </MudTable>
</MudPaper>

@code {
    private List<OrderResponse> _orders = [];
    private string? _search;

    protected override async Task OnInitializedAsync()
        => _orders = await OrderService.GetAsync(string.Empty);

    /* ---------- helpers ---------- */

    private bool FilterFunc(OrderResponse o) =>
        string.IsNullOrWhiteSpace(_search)
        || o.OrderNumber.Contains(_search, StringComparison.OrdinalIgnoreCase)
        || o.ShopSlug.Contains(_search, StringComparison.OrdinalIgnoreCase);

    private static string ToRu(OrderStatus s) => s switch
    {
        OrderStatus.Submitted => "Оформлен",
        OrderStatus.Ready => "Готов",
        OrderStatus.Issued => "Выдан",
        OrderStatus.Canceled => "Отменён",
        _ => s.ToString()
    };

    private async Task ChangeStatus(OrderResponse order, OrderStatus to, string? comment = null)
    {
        await OrderService.UpdateStatusAsync(order.Slug, to, comment);
        order.Status = to;
        Snackbar.Add($"Заказ {order.OrderNumber} → {ToRu(to)}", Severity.Success);
        StateHasChanged();
    }

    private async Task AskCancel(OrderResponse order)
    {
        var prm = new DialogParameters { ["Name"] = $"заказ {order.OrderNumber}" };
        var dlg = await Dialogs.ShowAsync<DeleteConfirmation>("Отмена заказа", prm);
        var res = await dlg.Result;
        if (!res!.Canceled)
            await ChangeStatus(order, OrderStatus.Canceled);
    }

}
