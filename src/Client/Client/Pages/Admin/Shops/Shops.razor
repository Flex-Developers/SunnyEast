@page "/admin/shops"
@using Application.Contract.Identity
@using Application.Contract.Shops.Commands
@using Application.Contract.Shops.Responses
@using Application.Contract.Staff.Enums
@using Client.Components.Dialogs
@using Severity = MudBlazor.Severity
@using Client.Infrastructure.Services.Shop
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = ApplicationRoles.SuperAdmin)]
@inject IShopService ShopService
@inject IDialogService DialogService

<div style="position: relative; display: flex; align-items: center; margin-bottom: 20px;">
    <h3 style="display: inline-block; margin-right: 20px">Магазины</h3>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(async () => await CreateShopAsync())"
               Style="position: absolute; right: 0; bottom: 5px;">
        Создать➕
    </MudButton>
</div>

<MudGrid Spacing="2" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @foreach (var shop in ShopsList)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="3" Class="shop-card">
                <MudCarousel Style="height: 280px; border-radius: 10px" ItemsSource="@shop.Images" Context="imgContext"
                             ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="string" BulletsColor="Color.Dark">
                    <ItemTemplate>
                        <MudCardMedia Image="@imgContext"></MudCardMedia>
                    </ItemTemplate>
                </MudCarousel>

                <MudCardContent Class="card-content">
                    <!-- Название продукта с минимальными отступами -->
                    <MudText Typo="Typo.h6" Align="Align.Left" Class="shop-text">
                        @(shop.Address.Length > 55 ? shop.Address.Substring(0, 55) + "..." : shop.Address)
                    </MudText>

                    @if (shop.Staff?.Any() == true)
                    {
                        <div class="staff-chips">
                            @foreach (var st in shop.Staff)
                            {
                                <MudChip T="string"
                                         Variant="Variant.Outlined"
                                         Color="@StaffRoleColor(st.Role)"
                                         Size="Size.Medium">
                                    @st.DisplayName
                                </MudChip>
                            }
                        </div>
                    }
                    else
                    {
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Medium">
                            Без персонала
                        </MudChip>
                    }

                    <!-- Контейнер с кнопками, выравненный по правому краю -->
                    <div class="buttons">
                        <MudButton Color="Color.Default" OnClick="@(async () => await EditShopAsync(shop))"
                                   Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px; margin-right: 5px">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"/>
                        </MudButton>

                        <MudButton Color="Color.Error" OnClick="@(async () => await DeleteShopAsync(shop))"
                                   Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px">
                            <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                        </MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {

    List<ShopResponse> ShopsList = new();
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        ShopsList = await ShopService.GetShopsAsync();
        StateHasChanged();
    }

    private static Color StaffRoleColor(StaffRole r) => r switch
    {
        StaffRole.Administrator => Color.Success,
        StaffRole.Salesman => Color.Info,
        _ => Color.Default
    };

    private async Task CreateShopAsync()
    {
        var parameters = new DialogParameters<CreateShopDialog>
        {
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) }
        };
        await DialogService.ShowAsync<CreateShopDialog>("Create", parameters);
    }

    private async Task EditShopAsync(ShopResponse shop)
    {
        UpdateShopCommand updateShop = new()
        {
            Slug = shop.Slug,
            Address = shop.Address,
            Images = shop.Images,
        };

        var parameters = new DialogParameters<EditShopDialog>
        {
            { "UpdateShop", updateShop },
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) }
        };

        await DialogService.ShowAsync<EditShopDialog>("Edit", parameters);
    }

    private async Task DeleteShopAsync(ShopResponse shop)
    {
        var deleteDialog = await DialogService.ShowAsync<DeleteConfirmation>("",
            new DialogParameters { { "Name", shop.Address } });

        if ((await deleteDialog.Result)!.Data is bool)
        {
            if (await ShopService.DeleteAsync(shop.Slug))
            {
                Snackbar.Add($"{shop.Address} удален!", Severity.Success);
                await OnInitializedAsync();
            }
        }
    }

}

<style>

    .shop-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 10px;
        max-width: 100%;
        height: 500px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid transparent;
    }

    .shop-card:hover {
        border: 1px solid #019934;
        box-shadow: 0 0 6px rgba(25, 118, 210, 0.3);
    }

    .card-content {
        padding: 8px 10px 10px 12px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .shop-text {
        margin: 0;
        white-space: normal;
        word-wrap: break-word;
        line-height: 1.2;
        flex: 1;
    }

    .buttons {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 5px;
    }

    .staff-chips 
    {
        display:flex;
        flex-wrap:wrap; 
        gap:6px;
        margin-top:8px;
    }

</style>