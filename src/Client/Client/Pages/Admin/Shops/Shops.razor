@page "/admin/shops"
@using Application.Contract.Shops.Commands
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.HttpClient
@using Severity = MudBlazor.Severity
@inject IHttpClientService HttpClient
@inject IDialogService DialogService

<div style="position: relative; display: flex; align-items: center; margin-bottom: 20px;">
    <h3 style="display: inline-block; margin-right: 20px">Магазины</h3>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick=" async () => await CreateShopAsync()"
               Style="position: absolute; right: 0; bottom: 5px;">
        Создать➕
    </MudButton>
</div>

<MudGrid Spacing="1" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @foreach (var shop in ShopsList)
    {
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Style="max-width: 100%; height: 400px; display: flex; flex-direction: column; justify-content: space-between;" Class="product-card">
                <MudCarousel Style="height: 250px" ItemsSource="@shop.Images" Context="imgContext" ShowArrows="true" ShowBullets="false" AutoCycle="false" TData="string">
                    <ItemTemplate>
                        <MudCardMedia Image="@imgContext"></MudCardMedia>
                    </ItemTemplate>
                </MudCarousel>

                <MudCardContent Style="padding: 5px 0 7px 8px; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">
                    <!-- Название продукта с минимальными отступами -->
                    <MudText Typo="Typo.h6" Align="Align.Left" Style="margin: 0; white-space: normal; word-wrap: break-word; line-height: 1.2; flex: 1;">
                        @(shop.Address.Length > 55 ? shop.Address.Substring(0, 55) + "..." : shop.Address)
                    </MudText>

                    <!-- Контейнер с кнопками, выравненный по правому краю -->
                    <div style="display: flex; justify-content: flex-end; margin-bottom: 5px;">
                        <MudButton Color="Color.Default" OnClick="@(async () => await EditShopAsync(shop))"
                                   Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px; margin-right: 5px">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"/>
                        </MudButton>

                        <MudButton Color="Color.Error" OnClick="@(async () => await DeleteShopAsync(shop))"
                                   Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px">
                            <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                        </MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {

    public sealed class Shop
    {
        public required string Slug { get; set; }
        public required string Address { get; set; }
        public string? AddressGoogle { get; set; }
        public string? AddressYandex { get; set; }
        public string[]? Images { get; set; }
    }

    List<Shop> ShopsList = new();
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        ShopsList = await GetShopsAsync();
        StateHasChanged();
    }

    private async Task<List<Shop>> GetShopsAsync()
    {
        var response = await HttpClient.GetFromJsonAsync<List<Shop>>("/api/Shop/GetShops");

        if (response.Success)
        {
            return response.Response!;
        }

        Snackbar.Add("Произошла ошибка при загрузке магазинов!", Severity.Error);
        return new List<Shop>();
    }

    private async Task CreateShopAsync()
    {
        var parameters = new DialogParameters<CreateShopDialog>
        {
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) }
        };
        await DialogService.ShowAsync<CreateShopDialog>("Create", parameters);
    }

    private async Task EditShopAsync(Shop shop)
    {
        UpdateShopCommand updateShop = new()
        {
            Slug = shop.Slug,
            Address = shop.Address,
            Images = shop.Images,
            AddressGoogle = shop.AddressGoogle,
            AddressYandex = shop.AddressYandex
        };

        var parameters = new DialogParameters<EditShopDialog>
        {
            { "UpdateShop", updateShop },
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) }
        };

        await DialogService.ShowAsync<EditShopDialog>("Edit", parameters);
    }

    private async Task DeleteShopAsync(Shop shop)
    {
        var deleteDialog = await DialogService.ShowAsync<DeleteConfirmation>("",
            new DialogParameters { { "Name", shop.Address } });

        var dialogResult = await deleteDialog.Result;

        if (dialogResult.Data is bool)
        {
            var response = await HttpClient.DeleteAsync($"/api/shop/{shop.Slug}");
            if (response.Success)
            {
                Snackbar.Add("Успешно удалено!", Severity.Success);
                await OnInitializedAsync();
            }
            else
                Snackbar.Add("Не удалось удалить!", Severity.Error);
        }
    }

}

<style>

    .product-card {
        transition: transform 0.3s ease;
    }

    .product-card:hover {
        transform: scale(1.05);
    }

</style>