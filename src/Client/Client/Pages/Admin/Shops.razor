@page "/admin/shops"
@using Application.Contract.Shops.Commands
@using Client.Infrastructure.Services.HttpClient
@inject IHttpClientService HttpClient
@inject IDialogService DialogService

<h3>Магазины</h3>

<MudGrid>
    @foreach (var shop in ShopsList)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudCard Style="height: 330px; position: relative;">
                <MudCardMedia Image="@shop.ImageUrl" Height="250"/>
                <MudCardContent>
                    <MudText Typo="Typo.inherit">@shop.Address</MudText>
                </MudCardContent>
                <MudCardActions Style="position: absolute; bottom: 1px; width: 100%;">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => EditShop(shop)">Изменить✏️</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => DeleteShopAsync(shop)">Удалить🗑️</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => createShopRequested = true">Создать➕</MudButton>

@if (editShopRequested)
{
    <div class="overlay">
        <MudContainer Class="form-container">
            <MudPaper Class="form-paper" Elevation="5">
                <MudForm @ref="form" Model="updateShop">
                    <MudTextField T="string" Required="true" Label="Адрес" @bind-Value="updateShop.Address"/>
                    <MudTextField T="string" Required="true" Label="URL изображения" @bind-Value="updateShop.ImageUrl"/>

                    <MudButton OnClick="SaveEditedShopAsync" Color="Color.Primary">Сохранить</MudButton>
                    <MudButton OnClick="() => editShopRequested = false" Color="Color.Secondary">Отмена</MudButton>
                </MudForm>
            </MudPaper>
        </MudContainer>
    </div>
}

@if (createShopRequested)
{
    <div class="overlay">
        <MudContainer Class="form-container">
            <MudPaper Class="form-paper" Elevation="5">
                <MudForm @ref="form">
                    <MudTextField T="string" Required="true" Label="Адрес" @bind-Value="createShop.Address"/>
                    <MudTextField T="string" Required="true" Label="URL изображения" @bind-Value="createShop.ImageUrl"/>

                    <MudButton OnClick="CreateShopAsync" Color="Color.Primary">Сохранить</MudButton>
                    <MudButton OnClick="() => createShopRequested = false" Color="Color.Secondary">Отмена</MudButton>
                </MudForm>
            </MudPaper>
        </MudContainer>
    </div>
}

@code {

    public sealed class Shop
    {
        public required string Slug { get; set; }
        public required string Address { get; set; }
        public string? AddressGoogle { get; set; }
        public string? AddressYandex { get; set; }
        public string? ImageUrl { get; set; }
    }

    CreateShopCommand createShop = new()
    {
        Slug = string.Empty,
        Address = string.Empty,
    };

    UpdateShopCommand updateShop = new()
    {
        Slug = string.Empty,
        Address = string.Empty
    };

    List<Shop> ShopsList = new();
    bool editShopRequested, createShopRequested;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        ShopsList = await GetShopsAsync();
    }

    private async Task<List<Shop>> GetShopsAsync()
    {
        var response = await HttpClient.GetFromJsonAsync<List<Shop>>("/api/Shop/GetShops");

        if (response.Success)
        {
            return response.Response!;
        }

        Snackbar.Add("Произошла ошибка при загрузке магазинов!", Severity.Error);
        return new List<Shop>();
    }

    private void EditShop(Shop shop)
    {
        updateShop = new UpdateShopCommand
        {
            Slug = shop.Slug,
            Address = shop.Address,
            ImageUrl = shop.ImageUrl
        };
        editShopRequested = true;
    }

    private async Task DeleteShopAsync(Shop shop)
    {
        bool? shouldDelete = await DialogService.ShowMessageBox(
            "Внимание",
            "Вы действительно хотите удалить элемент?",
            yesText: "Удалить", cancelText: "Отмена");

        if (shouldDelete is true)
        {
            var response = await HttpClient.DeleteAsync($"/api/shop/{shop.Slug}");
            if (response.Success)
            {
                Snackbar.Add("Успешно удалено!", Severity.Success);
                ShopsList = await GetShopsAsync();
            }
            else
                Snackbar.Add("Не удалось удалить!", Severity.Error);
        }
    }

    private async Task CreateShopAsync()
    {
        await form.Validate();
        if (form.IsValid) // if fields is not empty
        {
            createShopRequested = false;
            var response = await HttpClient.PostAsJsonAsync("/api/shop/", createShop);
            if (response.Success)
                Snackbar.Add("Успешно!", Severity.Success);
            else
                Snackbar.Add("Произошла ошибка!", Severity.Error);

            ShopsList = await GetShopsAsync();
        }
        else
            Snackbar.Add("Корректно заполните поля", Severity.Error);
    }

    private async Task SaveEditedShopAsync()
    {
        var response = await HttpClient.PutAsJsonAsync("/api/shop/", updateShop);
        if (response.Success)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            ShopsList = await GetShopsAsync();
        }
        else
            Snackbar.Add("Произошла ошибка", Severity.Error);

        editShopRequested = false;
    }

}

<style>
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Ensure it's on top */
    }

    .form-container {
        width: 100%;
        max-width: 600px;
        padding: 20px;
    }

    .form-paper {
        padding: 20px;
        width: 100%;
    }
</style>