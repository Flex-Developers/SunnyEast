@using Application.Contract.Product.Commands
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Product
@inject ICategoryService CategoryService
@inject IProductService ProductService
<MudForm Model="UpdateCommand" @ref="_form">
    <MudDialog Style="width:40%">
        <TitleContent>
            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1"/>Изменить продукт</MudText>
        </TitleContent>

        <DialogContent>
            <MudSelect T="string" Required="true" Label="Категория" AnchorOrigin="Origin.BottomCenter" @bind-Value="CategoryName" FullWidth="true">
                @foreach (var category in Categories)
                {
                    <MudSelectItem Value="@category">@category</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Required="true" Label="Название" @bind-Value="UpdateCommand.Name" InputType="InputType.Text" FullWidth="true" Clearable="true" AutoGrow="true"/>
            <MudTextField Required="true" Label="Цена" @bind-Value="UpdateCommand.Price" Format="F1" Clearable="true" FullWidth="true"/>
            <MudTextField Label="Описание" @bind-Value="UpdateCommand.Description" InputType="InputType.Text" Clearable="true" FullWidth="true" AutoGrow="true"/>

            <MudButton Color="Color.Success" OnClick="ShowImageTable" StartIcon="@Icons.Material.Filled.Add">Изменить изображения</MudButton>

            @if (_showTable)
            {
                <MudGrid>
                    @foreach (var image in _images.Select((value, index) => new { value, index }))
                    {
                        <MudTextField HelperText="@((image.index + 1).ToString())" @bind-Value="_images[image.index]" Label="Url изображения"
                                      InputType="InputType.Url" InputMode="InputMode.url" Clearable="true" FullWidth="true" AutoGrow="true"/>
                    }
                </MudGrid>

                <div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
                    <MudButton OnClick="SaveImagesChanges" Color="Color.Primary" Variant="Variant.Filled">
                        Сохранить изменения
                    </MudButton>
                    <MudButton OnClick="CancelImagesChanges" Color="Color.Error" Variant="Variant.Outlined">
                        Отменить изменения
                    </MudButton>
                </div>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Отмена</MudButton>
            <MudButton Disabled="@_showTable" Color="Color.Primary" Variant="Variant.Filled" OnClick="EditAsync">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string CategoryName { get; set; } = string.Empty;
    [Parameter] public Action OnSuccessfullyCreate { get; set; } = null!;
    [Parameter] public List<string> Categories { get; set; } = null!;
    [Parameter] public UpdateProductCommand UpdateCommand { get; set; } = null!;
    private List<string> _images;
    private MudForm _form = null!;
    private bool _showTable;

    protected override async Task OnInitializedAsync()
    {
        _images = UpdateCommand.Images!.ToList();
        
        for (int i = _images.Count; i < 10; i++) // Добавление пустых строк, чтобы было предварительно 10 полей
            _images.Add("");

        UpdateCommand.Images = _images.ToArray(); // Чтобы при изменении, добавленные пустые строки не исчезли
    }

    private void ShowImageTable()
    {
        _showTable = true;
    }

    private void SaveImagesChanges()
    {
        if (_images.All(string.IsNullOrEmpty)) // if images not added
        {
            _showTable = false;
            return;
        }

        _showTable = false;
        _images = SortList(_images);
        UpdateCommand.Images = _images.ToArray();

        Snackbar.Add("Изображения сохранены", Severity.Success);

        List<string> SortList(List<string> images)
        {
            // Сортирует список на случай если пользователь не введет данные подряд и оставит строки пустыми 
            for (int i = 0; i < images.Count; i++)
            {
                if (string.IsNullOrEmpty(images[i]))
                {
                    for (int j = i; j < images.Count; j++)
                    {
                        if (!string.IsNullOrEmpty(images[j]))
                        {
                            (images[j], images[i]) = (images[i], images[j]); // swap
                            j = images.Count;
                        }
                    }
                }
            }

            return images;
        }
    }

    private void CancelImagesChanges()
    {
        _images = UpdateCommand.Images?.ToList() ?? new List<string>(Enumerable.Repeat("", 10));
        _showTable = false;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task EditAsync()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            UpdateCommand.ProductCategorySlug = (await CategoryService.GetByName(CategoryName))!.Slug;
            UpdateCommand.Images = _images.Where(i => !string.IsNullOrEmpty(i)).ToArray(); // Избавляемся от пустых ссылок-строк

            var success = await ProductService.Put(UpdateCommand);
            if (success)
            {
                Snackbar.Add("Продукт успешно изменен!", Severity.Success);
                MudDialog.Close();
                OnSuccessfullyCreate();
            }
        }
        else
        {
            Snackbar.Add("Пожалуйста, заполните все обязательные поля.", Severity.Warning);
        }
    }

}