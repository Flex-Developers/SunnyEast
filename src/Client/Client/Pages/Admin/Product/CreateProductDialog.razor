@using Application.Contract.Product.Commands
@using Application.Contract.ProductCategory.Responses
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Price
@using Client.Infrastructure.Services.Product
@using Severity = MudBlazor.Severity
@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject IPriceCalculatorService PriceCalculator
<MudForm Model="_command" @ref="_form">
    <MudDialog Class="product-dialog" >
        <TitleContent>
            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/>Добавить продукт</MudText>
        </TitleContent>

        <DialogContent>
            <MudSelect T="string" Class="mb-2" Required="true" RequiredError="Выберите категорию." Label="Категория" AnchorOrigin="Origin.BottomCenter" @bind-Value="CategoryName" FullWidth="true">
                @foreach (var category in Categories.Select(c => c.Name))
                {
                    <MudSelectItem Value="@category">@category</MudSelectItem>
                }
            </MudSelect>

            <MudTextField Class="mb-2" Required="true" RequiredError="Название не может быть пустым!" Label="Название" @bind-Value="_command.Name" InputType="InputType.Text" FullWidth="true" Clearable="true" AutoGrow="true"/>

            <MudGrid Class="mb-2">
                <MudItem xs="4">
                    <MudNumericField T="decimal?" Min="0" Required="true" RequiredError="Цена не может быть пустой" Label="Цена мин объема" Format="F2" Clearable="true" Immediate="true" FullWidth="true"
                                     ValueChanged="@(price => { _command.Price = price; UpdateDiscountPrice(_command.DiscountPercentage); })"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField T="byte?" Label="Скидка (%)" ValueChanged="@(percentage => UpdateDiscountPrice(percentage))"
                                     Min="0" Max="100" Immediate="true" FullWidth="true" Clearable="true"/>
                </MudItem>
                @if (_command.DiscountPercentage is >= 0)
                {
                    <MudItem xs="4">
                        <MudTextField Label="Цена со скидкой" @bind-Value="_command.DiscountPrice" ReadOnly="true" FullWidth="true"/>
                    </MudItem>
                }
            </MudGrid>

            <MudTextField Class="mb-4" Label="Описание" @bind-Value="_command.Description" InputType="InputType.Text" Clearable="true" FullWidth="true" AutoGrow="true"/>

            <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                <MudText Typo="Typo.h6">Объемы / Цены</MudText>

                <MudChipSet T="string?" ReadOnly="true" Ripple="true" Class="chip-row" Style="margin-left: -5px">
                    @if (GetCurrentProductVolumes() != null)
                    {
                        @foreach (var volume in GetCurrentProductVolumes()!)
                        {
                            <MudChip Text="@volume" Value="@volume" Variant="Variant.Outlined" Color="Color.Info">@volume</MudChip>
                        }
                    }
                </MudChipSet>
                
                <MudChipSet T="string?" ReadOnly="true" Ripple="true" Style="margin-left: -5px">
                    @if (GetPricesForVolumes() != null)
                    {
                        @foreach (var volume in GetPricesForVolumes()!)
                        {
                            <MudChip Text="@volume" Value="@volume" Variant="Variant.Outlined" Color="Color.Info">@volume</MudChip>
                        }
                    }
                </MudChipSet>
            </MudStack>

            
            <MudButton Color="Color.Success" Style="margin-left: -10px; margin-top: 10px"
                       hidden="@_showTable" OnClick="ShowImageTable" StartIcon="@Icons.Material.Filled.Add">Добавить изображения</MudButton>

            @if (_showTable)
            {
                <MudGrid Style="padding-left: 25px; padding-top: 45px">
                    @foreach (var image in _images.Select((value, index) => new { value, index }))
                    {
                        <MudTextField HelperText="@((image.index + 1).ToString())" @bind-Value="_images[image.index]" Label="Url изображения"
                                      InputType="InputType.Url" InputMode="InputMode.url" Clearable="true" FullWidth="true" AutoGrow="true"
                                      Error="@_images[image.index].Contains(" ")" ErrorText="Ссылка не может содержать пробелы!" Immediate="true"/>
                    }
                </MudGrid>

                <div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
                    <MudButton OnClick="SaveImagesChanges" Color="Color.Primary" Variant="Variant.Filled" Disabled="@_images.Any(url => url.Contains(" "))">
                        Сохранить изменения
                    </MudButton>
                    <MudButton OnClick="CancelImagesChanges" Color="Color.Error" Variant="Variant.Outlined">
                        Отменить изменения
                    </MudButton>
                </div>
            }
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="Cancel">Отмена</MudButton>
            <MudButton Disabled="@_showTable" Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateAsync">Создать</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string? CategoryName { get; set; } = string.Empty;
    [Parameter] public Action OnSuccessfullyCreate { get; set; } = null!;
    [Parameter] public List<ProductCategoryResponse> Categories { get; set; } = null!;
    private List<string> _images = Enumerable.Repeat(string.Empty, 10).ToList();
    private MudForm _form = null!;
    private bool _showTable;

    private readonly CreateProductCommand _command = new()
    {
        Name = "",
        ProductCategorySlug = "",
        Price = null,
        Description = "",
    };

    protected override void OnInitialized()
    {
        if (CategoryName == "Все продукты")
            CategoryName = string.Empty;
    }

    private string[]? GetCurrentProductVolumes()
    {
        if (string.IsNullOrEmpty(CategoryName) == false)
            return Categories.FirstOrDefault(c => c.Name == CategoryName)!.ProductVolumes!;
        
        return null;
    }

    
    private IEnumerable<string> GetPricesForVolumes()
    {
        var vols = GetCurrentProductVolumes();
        if (vols is null || !_command.Price.HasValue) 
            return [];

        var pairs = PriceCalculator.GetPrices(vols, _command.Price!.Value, _command.DiscountPercentage);

        return pairs.Select(p => p.Price is null ? "—" : $"{p.Price:N2} ₽");
    }


    private void ShowImageTable()
    {
        _showTable = true;
    }

    private void SaveImagesChanges()
    {
        if (_images.All(string.IsNullOrEmpty)) // if images not added
        {
            _showTable = false;
            return;
        }

        _showTable = false;
        _images = SortList(_images);
        _command.Images = _images.ToArray();

        Snackbar.Add("Изображения сохранены", Severity.Success);

        List<string> SortList(List<string> images)
        {
            // Сортирует список на случай если пользователь не введет данные подряд и оставит строки пустыми 
            for (int i = 0; i < images.Count; i++)
            {
                if (string.IsNullOrEmpty(images[i]))
                {
                    for (int j = i; j < images.Count; j++)
                    {
                        if (!string.IsNullOrEmpty(images[j]))
                        {
                            (images[j], images[i]) = (images[i], images[j]);
                            j = images.Count;
                        }
                    }
                }
            }

            return images;
        }
    }

    private void CancelImagesChanges()
    {
        _images = ((_command.Images?.ToList() ?? Enumerable.Repeat(string.Empty, 10).ToList()!)!);
        _showTable = false;
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task CreateAsync()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            _command.ProductCategorySlug = (await CategoryService.GetByName(CategoryName!))!.Slug;
            _command.Images = _images.Where(i => !string.IsNullOrWhiteSpace(i)).ToArray(); // Избавляемся от пустых ссылок-строк

            var success = await ProductService.Post(_command);
            if (success)
            {
                Snackbar. Add("Продукт успешно создан!", Severity.Success);
                MudDialog.Close();
                OnSuccessfullyCreate();
            }
        }
        else
        {
            Snackbar. Add("Пожалуйста, заполните все обязательные поля правильно!", Severity.Warning);
        }
    }

    private void UpdateDiscountPrice(byte? percentage)
    {
        _command.DiscountPercentage = percentage;

        if (_command.Price.HasValue && _command.DiscountPercentage.HasValue)
        {
            var discount = _command.Price * (_command.DiscountPercentage / 100m);
            _command.DiscountPrice = Math.Round((decimal)(_command.Price - discount), 2);
        }
        else
        {
            _command.DiscountPrice = null;
        }

        StateHasChanged();
    }

}

<style>
    .product-dialog {
        width: 95%; 
        max-width: 600px; 
    }

    .chip-row .mud-chip:not(:last-child) {
        margin-right: 8px;
    }
</style>
