@page "/admin/products"
@using Application.Contract.Product.Commands
@using Application.Contract.Product.Queries
@using Application.Contract.Product.Responses
@using Application.Contract.ProductCategory.Responses
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Product
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<MudPaper Elevation="25">
    <MudToolBar>
        <MudSelect T="string" Label="Категория" Style="margin-right: 15px;"
                   Value="@SelectedCategory" ValueChanged="@(async (string value) => await OnCategoryChanged(value))">
            @foreach (var category in _categories)
            {
                <MudSelectItem Value="@(category.Name)">@category.Name</MudSelectItem>
            }
        </MudSelect>
        
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="CreateAsync" Class="button-create">Создать➕</MudButton>

        <MudSpacer/>

        <MudAutocomplete T="ProductResponse" SearchFunc="SearchAsync" ToStringFunc="@(result => result.Name)" ResetValueOnEmptyText="true"
                         Immediate="true" Clearable="true" Label="Поиск" DebounceInterval="300" AdornmentIcon="@Icons.Material.Filled.Search" Class="autocomplete"/>

        @if (IsSearching)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="ml-2"/>
        }

    </MudToolBar>
</MudPaper>

<MudGrid Spacing="3" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @foreach (var product in _products)
    {
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Class="product-card">
                
                <MudCarousel Style="height: 250px; border-radius: 10px;" ItemsSource="@product.Images" Context="imgContext" EnableSwipeGesture="true" 
                             BulletsPosition="Position.Bottom" ShowBullets="false" AutoCycle="true" TData="string" BulletsColor="Color.Dark"
                             ShowArrows="@(@product.Images != null && product.Images.Length > 1 && product.Images[0].StartsWith("http"))">
                    
                    <ItemTemplate>
                        <MudCardMedia Image="@imgContext"></MudCardMedia>
                    </ItemTemplate>
                    
                </MudCarousel>

                <MudCardContent Class="card-content">
                    
                    <MudText Typo="Typo.subtitle1" Align="Align.Left" Class="product-name">
                        @(product.Name.Length > 70 ? product.Name.Substring(0, 70) + "..." : product.Name)
                    </MudText>

                    <div class="discount-container">

                        <MudText Typo="Typo.body2" Align="Align.Left" Style="margin: 0;">Цена:</MudText>

                        @if (product.DiscountPrice.HasValue)
                        {
                            <MudText Typo="Typo.body2" Align="Align.Left" Class="discounted-price"> @($"{product.DiscountPrice}") </MudText>

                            <MudText Typo="Typo.body1" Align="Align.Right" Class="price"> @($"{product.Price}") </MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="margin-left: 5px;"> @($"{product.Price}") </MudText>
                        }
                    </div>

                    <div class="description-container">
                        <MudLink Typo="Typo.caption" Style="padding-left: 0" OnClick="() => OpenDescriptionAsync(product)"> Читать описание... </MudLink>

                        <div class="buttons-container">
                            <MudButton Color="Color.Primary" Variant="Variant.Text" Size="Size.Small" Class="button" OnClick="@(async () => await DuplicateProduct(product))">
                                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"/>
                            </MudButton>
                            
                            <MudButton Color="Color.Default" Variant="Variant.Text" Size="Size.Small" Class="button" OnClick="@(async () => await EditProductAsync(product))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit"/>
                            </MudButton>

                            <MudButton Color="Color.Error" Variant="Variant.Text" Size="Size.Small" Class="button" OnClick="@(async () => await DeleteProductAsync(product))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                            </MudButton>
                        </div>
                    </div>

                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {
    private List<ProductResponse> _products = new();
    private List<ProductCategoryResponse> _categories = new();
    private readonly GetProductsQuery _query = new();
    private bool IsSearching { get; set; }

    [Parameter]
    public string? SelectedCategory { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await CategoryService.Get())!;
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        SelectedCategory = query["category"] ?? await LoadSelectedCategoryAsync();
        await LoadProductsAsync(SelectedCategory);
        StateHasChanged();
    }


    private async Task OnCategoryChanged(string value)
    {
        SelectedCategory = value;
        await LoadProductsAsync(SelectedCategory);
        StateHasChanged();
    }

    private async Task OnProductSelected(ProductResponse selectedProduct)
    {
    }

    private async Task<IEnumerable<ProductResponse>> SearchAsync(string name, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(name))
            return [];

        IsSearching = true;
        _query.Name = name;

        var result = await ProductService.Get(_query);

        IsSearching = false;
        StateHasChanged();

        return result;
    }

    private async Task DuplicateProduct(ProductResponse currentProduct)
    {
        string baseName = currentProduct.Name.Split('(')[0].Trim();
        int copyNumber = _products.Count(p => p.Name.StartsWith(baseName)) + 1;
    
        await ProductService.Post(new CreateProductCommand
        {
            Name = $"{baseName}({copyNumber})",
            Description = currentProduct.Description,
            DiscountPercentage = currentProduct.DiscountPercentage,
            DiscountPrice = currentProduct.DiscountPrice,
            Images = currentProduct.Images!,
            Price = currentProduct.Price,
            ProductCategorySlug  = (await CategoryService.GetByName((SelectedCategory == "Все продукты"
                ? _categories.First(c => c.Slug == currentProduct.ProductCategorySlug).Name
                : SelectedCategory)!))!.Slug
        });

        await OnInitializedAsync();
    }

    private async Task EditProductAsync(ProductResponse product)
    {
        var updateCommand = new UpdateProductCommand
        {
            Slug = product.Slug,
            Name = product.Name,
            Price = product.Price,
            DiscountPrice = product.DiscountPrice,
            DiscountPercentage = product.DiscountPercentage,
            Images = product.Images,
            Description = product.Description,
        };

        string categoryName = SelectedCategory;
        
        if (categoryName == "Все продукты")
            categoryName = _categories.FirstOrDefault(c => c.Slug == product.ProductCategorySlug)!.Name;
        
        var parameters = new DialogParameters<EditProductDialog>
        {
            { "UpdateCommand", updateCommand },
            { "CategoryName", categoryName},
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) },
            { "Categories", _categories.Where(c => c.Name != "Все продукты").ToList() }
        };

        await DialogService.ShowAsync<EditProductDialog>("Edit", parameters);
    }

    private async Task DeleteProductAsync(ProductResponse product)
    {
        var delDialog = await DialogService.ShowAsync<DeleteConfirmation>("",
            new DialogParameters { { "Name", product.Name } });

        if (((await delDialog.Result)!).Canceled is false)
        {
            await ProductService.Delete(product.Slug);
            await OnInitializedAsync();
        }
    }

    private async Task OpenDescriptionAsync(ProductResponse product)
    {
        await DialogService.ShowAsync<ProductDescriptionDialog>("",
            new DialogParameters
            {
                { "ContentText", product.Description },
                { "ProductName", product.Name }
            });
    }

    private async Task LoadProductsAsync(string category)
    {
        if (!string.IsNullOrEmpty(category))
        {
            if (category == "Все продукты")
                _products = await ProductService.Get(new GetProductsQuery());
            else
                _products = await ProductService.GetByCategoryName(category);
            await SaveSelectedCategoryAsync(category);
        }
    }

    private async Task SaveSelectedCategoryAsync(string category)
    {
        await LocalStorage.SetItemAsync("selectedCategory", category);
    }

    private async Task<string> LoadSelectedCategoryAsync()
    {
        string selectedCategory = (await LocalStorage.GetItemAsync<string>("selectedCategory"))!;

        if (_categories.Any(c => c.Name == selectedCategory))
            return selectedCategory;

        return string.Empty;
    }

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters<CreateProductDialog>
        {
            { "CategoryName", SelectedCategory },
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) },
            { "Categories", _categories.Where(c => c.Name != "Все продукты").ToList()}
        };

        await DialogService.ShowAsync<CreateProductDialog>("Create", parameters);
    }
}

<style>
    .button-create {
        vertical-align: middle;
        margin-bottom: -10px
    }
    
    .autocomplete {
        width: calc(100% - 1px); 
        margin-right: -200px;
    }
    
    .product-card {
        position: relative;
        border-radius: 10px;
        max-width: 100%; 
        height: 450px; 
        display: flex; 
        flex-direction: column; 
        justify-content: space-between;
        transition: box-shadow 0.3s ease, border 0.3s ease;
        z-index: 1;
        border: 1px solid transparent;
    }

    .product-card:hover {
        border: 1px solid green;
        box-shadow: 0 0 6px rgba(25, 118, 210, 0.3);
    }
    
    .card-content {
        padding: 5px 0 7px 8px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    
    .product-name {
        margin: 0; 
        white-space: normal; 
        word-wrap: break-word; 
        line-height: 1.2; 
        flex: 1;
    }
    
    .discount-container {
        display: flex; 
        flex-direction: row; 
        align-items: center;
        margin-top: 10px;
    }
    
    .discounted-price {
        margin-left: 5px; 
        color: red;
    }
    
    .price {
        margin-left: auto; 
        margin-right: 15px; 
        text-decoration: line-through; 
        font-size: larger;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .description-container {
        display: flex; 
        justify-content: space-between; 
        align-items: center;
        margin-bottom: -7px
    }
    
    .buttons-container {
        display: flex; 
        gap: 1px; 
        margin-bottom: 5px
    }
    
    .button {
        min-width: 25px
    }

</style>