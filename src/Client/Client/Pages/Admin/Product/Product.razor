@page "/admin/products"
@using Application.Contract.Product.Commands
@using Application.Contract.Product.Queries
@using Application.Contract.Product.Responses
@using Application.Contract.ProductCategory.Responses
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Product
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IDialogService DialogService

<MudPaper Elevation="25">
    <MudToolBar>
        <MudSelect T="string" Label="Категория" Style="margin-right: 15px; padding-bottom: 3%" AnchorOrigin="Origin.BottomCenter" ValueChanged="@LoadProductsAsync">
            @foreach (var category in _categories)
            {
                <MudSelectItem Value="@(category.Name)">@category.Name</MudSelectItem>
            }
        </MudSelect>

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="CreateAsync" Style="vertical-align: middle;">Создать➕</MudButton>

        <MudSpacer/>

        <MudAutocomplete T="ProductResponse" SearchFunc="SearchAsync" ToStringFunc="@(result => result.Name)" ResetValueOnEmptyText="true"
                         Immediate="true" Clearable="true" Label="Поиск" DebounceInterval="300" AdornmentIcon="@Icons.Material.Filled.Search"
                         Style="width: calc(100% - 15px); margin-bottom: 15px; margin-right: 15px;"/>

        @if (IsSearching)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="ml-2"/>
        }

    </MudToolBar>

</MudPaper>

<MudGrid Spacing="1" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @foreach (var product in _products)
    {
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Style="max-width: 100%; height: 400px; display: flex; flex-direction: column; justify-content: space-between;" Class="product-card">
                <MudCarousel Style="height: 250px" ItemsSource="@product.Images" Context="imgContext" ShowArrows="true" ShowBullets="false" AutoCycle="false" TData="string">
                    <ItemTemplate>
                        <MudCardMedia Image="@imgContext"></MudCardMedia>
                    </ItemTemplate>
                </MudCarousel>

                <MudCardContent Style="padding: 5px 0 7px 8px; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">
                    <!-- Название продукта с минимальными отступами -->
                    <MudText Typo="Typo.h6" Align="Align.Left" Style="margin: 0; white-space: normal; word-wrap: break-word; line-height: 1.2; flex: 1;">
                        @(product.Name.Length > 40 ? product.Name.Substring(0, 40) + "..." : product.Name)
                    </MudText>

                    <div style="display: flex; flex-direction: row; align-items: center; margin-top: 15px; margin-bottom: -5px">
                        <MudText Typo="Typo.body2" Align="Align.Left" Style="margin: 0;">Цена: </MudText>

                        @if (product.DiscountPrice.HasValue)
                        {
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="margin-left: 5px; color: red;">
                                @($"{product.DiscountPrice}")
                            </MudText>

                            <MudText Typo="Typo.body1" Align="Align.Right" Style="margin-left: auto; margin-right: 15px; text-decoration: line-through; font-size: larger;">
                                @($"{product.Price}")
                            </MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="margin-left: 5px;">
                                @($"{product.Price}")
                            </MudText>
                        }
                    </div>

                    <!-- Контейнер с ссылкой и кнопками, размещенный внизу -->
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: -7px">
                        <MudLink Typo="Typo.caption" Style="padding-left: 0" OnClick="() => OpenDescription(product.Name, product.Description)">
                            Читать описание...
                        </MudLink>

                        <div style="display: flex; gap: 1px; margin-bottom: 5px">
                            <MudButton Color="Color.Default" OnClick="@(async () => await EditProductAsync(product))"
                                       Variant="Variant.Text" Size="Size.Small" Style="min-width: 25px">
                                <MudIcon Icon="@Icons.Material.Filled.Edit"/>
                            </MudButton>

                            <MudButton Color="Color.Error" OnClick="@(async () => await DeleteProductAsync(product))"
                                       Variant="Variant.Text" Size="Size.Small" Style="min-width: 25px">
                                <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                            </MudButton>
                        </div>
                    </div>
                </MudCardContent>


            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {
    private List<ProductResponse> _products = new();
    private List<ProductCategoryResponse> _categories = new();
    private readonly GetProductsQuery _query = new();
    private string _selectedCategory = "";
    private bool IsSearching { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync(_selectedCategory);
        _categories = (await CategoryService.Get())!;
        StateHasChanged();
    }

    private async Task OnProductSelected(ProductResponse selectedProduct)
    {
    }

    private async Task<IEnumerable<ProductResponse>> SearchAsync(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return [];

        IsSearching = true;
        _query.Name = name;

        var result = await ProductService.Get(_query);

        IsSearching = false;
        StateHasChanged();

        return result;
    }

    private async Task EditProductAsync(ProductResponse product)
    {
        var updateCommand = new UpdateProductCommand
        {
            Slug = product.Slug,
            Name = product.Name,
            Price = product.Price,
            DiscountPrice = product.DiscountPrice,
            DiscountPercentage = product.DiscountPercentage,
            Images = product.Images,
            Description = product.Description,
        };

        var parameters = new DialogParameters<EditProductDialog>
        {
            { "UpdateCommand", updateCommand },
            { "CategoryName", _selectedCategory },
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) },
            { "Categories", _categories.Select(c => c.Name).ToList() }
        };
        await DialogService.ShowAsync<EditProductDialog>("Edit", parameters);
    }

    private async Task DeleteProductAsync(ProductResponse product)
    {
        var delDialog = await DialogService.ShowAsync<DeleteConfirmation>("",
            new DialogParameters { { "ContentText", $"Вы хотите удалить {product.Name}?" } });

        var delDialogResult = await delDialog.Result;

        if (delDialogResult.Canceled)
            return;

        if (delDialogResult.Data is bool)
        {
            await ProductService.Delete(product.Slug);
        }

        await OnInitializedAsync();
    }

    private async Task OpenDescription(string name, string? description)
    {
        await DialogService.ShowAsync<ProductDescriptionDialog>("",
            new DialogParameters
            {
                { "ContentText", description },
                { "ProductName", name }
            });
    }

    private async Task LoadProductsAsync(string category)
    {
        _selectedCategory = category;
        if (!string.IsNullOrEmpty(_selectedCategory))
        {
            _products = await ProductService.GetByCategoryName(_selectedCategory);
            StateHasChanged();
        }
    }

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters<CreateProductDialog>
        {
            { "CategoryName", _selectedCategory },
            { "OnSuccessfullyCreate", new Action(async () => await OnInitializedAsync()) },
            { "Categories", _categories.Select(c => c.Name).ToList() }
        };
        await DialogService.ShowAsync<CreateProductDialog>("Create", parameters);
    }

}

<style>

    .product-card {
        transition: transform 0.3s ease;
    }

    .product-card:hover {
        transform: scale(1.05);
    }
    
</style>