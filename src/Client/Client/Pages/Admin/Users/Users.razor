@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using Application.Contract.Identity
@using Application.Contract.User.Responses
@using Client.Infrastructure.Services.User
@using Client.Infrastructure.Services.Staff
@using Severity = MudBlazor.Severity
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = ApplicationRoles.SuperAdmin)]

@inject IUserService UserService
@inject IStaffService StaffService
@inject IDialogService Dialogs
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthState


<MudContainer MaxWidth="MaxWidth.Large" Class="mx-auto">

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4 font-weight-bold">
        Пользователи
    </MudText>
    <div class="users-table-wrap">
        <MudTable T="CustomerResponse" Items="_users" Hover="true" Dense="true"
                  Elevation="10" Bordered="true" Class="border rounded-lg"
                  Filter="Filter" Breakpoint="Breakpoint.Sm">

            <ToolBarContent>
                <MudTextField T="string" @bind-Value="_search"
                              Placeholder="Поиск по ФИО / почте / телефону…"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate Class="w-100"/>
            </ToolBarContent>

            <HeaderContent>
                <MudTh Class="date-cell">Имя фамилия</MudTh>
                <MudTh class="email-col">Email</MudTh>
                <MudTh>Телефон</MudTh>
                <MudTh class="hide-sm date-cell">Дата регистрации</MudTh>
                <MudTh class="actions-col">Действия</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Имя фамилия">@FullName(context)</MudTd>
                <MudTd DataLabel="Email">
                    @if (!string.IsNullOrWhiteSpace(context.Email))
                    {
                        <MudTooltip Text="@context.Email">
                            <span class="email-text ellipsis">@context.Email</span>
                        </MudTooltip>
                    }
                    else
                    {
                        <span class="muted">—</span>
                    }
                </MudTd>
                <MudTd DataLabel="Телефон">@context.Phone</MudTd>
                <MudTd DataLabel="Дата регистрации" Class="hide-sm">@FormatDate(context.RegisteredAt)</MudTd>

                <MudTd DataLabel="Действия" Class="actions-td">
                    <div class="actions-cell">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Info"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Receipt"
                                   OnClick="@(() => OpenOrders(context))">
                            Заказы
                        </MudButton>

                        @if (!context.IsStaff && !context.IsSuperAdmin && !context.IsCurrentUser)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.PersonAdd"
                                       OnClick="@(() => AskHire(context))">
                                Нанять
                            </MudButton>
                        }

                        @if (!context.IsSuperAdmin && !context.IsCurrentUser)
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@(() => AskDelete(context))">
                                Удалить
                            </MudButton>
                        }
                    </div>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="my-6">
                    Ничего не найдено.
                </MudText>
            </NoRecordsContent>

            <PagerContent>
                <MudTablePager PageSizeOptions="new[] {15}" HideRowsPerPage="true"
                               HorizontalAlignment="HorizontalAlignment.End"
                               InfoFormat="{first_item}-{last_item} из {all_items}"/>
            </PagerContent>
        </MudTable>
    </div>
</MudContainer>

@code {
    private List<CustomerResponse> _all = new();
    private List<CustomerResponse> _users = new();
    private string? _search;
    private Guid _meId;
    
    
    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var idStr = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        Guid.TryParse(idStr, out _meId);

        _all = await UserService.GetAllUsersAsync();
        _users = _all.ToList();
    }

    private static string FormatDate(DateTime? dt)
        => dt.HasValue ? dt.Value.ToLocalTime().ToString("dd.MM.yyyy") : "—";

    private bool Filter(CustomerResponse u) =>
        string.IsNullOrWhiteSpace(_search)
        || FullName(u).Contains(_search, StringComparison.OrdinalIgnoreCase)
        || (u.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) ?? false)
        || (u.Phone?.Contains(_search, StringComparison.OrdinalIgnoreCase) ?? false);

    private static string FullName(CustomerResponse u)
        => string.Join(" ", new[] { u.Name, u.Surname }.Where(s => !string.IsNullOrWhiteSpace(s)));

    private void OpenOrders(CustomerResponse user)
    {
        var name = Uri.EscapeDataString(FullName(user));
        Nav.NavigateTo($"/admin/orders?userId={user.Id}&name={name}");
    }

    private async Task AskHire(CustomerResponse user)
    {
        if (user.Id == _meId) 
        { 
            Snackbar.Add("Нельзя назначить самого себя.", Severity.Warning); 
            return;
        }
        
        var name = FullName(user);
        var confirmed = await Dialogs.ShowMessageBox(
            "Подтверждение назначения",
            (MarkupString)$"Вы хотите назначить «{name}» сотрудником?",
            yesText: "Назначить",
            cancelText: "Отмена",
            options: new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true }
        );

        if (confirmed is true)
        {
            var ok = await StaffService.HireAsync(user.Id);
            if (ok)
            {
                Snackbar.Add($"Пользователь «{name}» добавлен в персонал.", Severity.Success);
                Nav.NavigateTo("/admin/staff");
            }
            else
            {
                Snackbar.Add("Не удалось назначить пользователя сотрудником.", Severity.Error);
            }
        }
    }

    private async Task AskDelete(CustomerResponse user)
    {
        if (user.Id == _meId)
        {
            Snackbar.Add("Нельзя удалить самого себя.", Severity.Warning);
            return;
        }
        
        var name = FullName(user);
        var confirmed = await Dialogs.ShowMessageBox(
            "Удаление пользователя",
            (MarkupString)$"Удалить пользователя «{name}»? Действие необратимо.",
            yesText: "Удалить",
            cancelText: "Отмена",
            options: new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true }
        );

        if (confirmed is true)
        {
            var ok = await UserService.DeleteAsync(user.Id);
            if (ok)
            {
                _all.RemoveAll(u => u.Id == user.Id);
                _users.RemoveAll(u => u.Id == user.Id);
                Snackbar.Add($"Пользователь «{name}» удалён.", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Не удалось удалить пользователя.", Severity.Error);
            }
        }
    }

}

<style>
    .users-table-wrap {
        overflow-x: auto;
    }

    .hide-sm {
        display: table-cell;
    }

    .date-cell {
        white-space: nowrap;
        width: 1%;
    }

    @@media (max-width: 768px) {
        .hide-sm {
            display: none;
        }
    }

    .actions-col {
        width: 1%;
        white-space: nowrap;
    }

    .actions-td {
        white-space: nowrap;
        text-align: right;
    }

    .actions-cell {
        display: inline-grid;
        grid-auto-flow: column;
        grid-auto-columns: max-content;
        gap: 8px;
        margin-left: auto;
    }

    .actions-cell .mud-button-root {
        min-width: 100px;
        padding-inline: 12px;
        flex: 0 0 auto;
    }
</style>
