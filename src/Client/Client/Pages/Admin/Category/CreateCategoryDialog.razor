@using Application.Contract.Identity
@using Client.Infrastructure.Services.Category
@using Application.Contract.ProductCategory.Commands
@using Microsoft.AspNetCore.Authorization
@using Severity = MudBlazor.Severity
@attribute [Authorize(Roles = ApplicationRoles.AllAdmins)]
@inject ICategoryVolumesValidationService CategoryVolumesValidationService
@inject ICategoryService CategoryService

<MudDialog Class="category-dialog">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="dialog-title">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2 mb-n1"/>
            Создать категорию
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="_command.Name" Label="Название" Required="true" Class="dialog-text-field"/>

        <MudTextField @bind-Value="_command.ImageUrl" Label="Ссылка на изображение" AutoGrow="true" FullWidth="true" Clearable="true" Class="dialog-text-field"/>

        <MudNumericField T="byte?" Label="Скидка (%)" @bind-Value="_command.DiscountPercentage" Min="0" Max="100" Immediate="true" FullWidth="true" Clearable="true"/>
        
        <MudText Typo="Typo.h6" Style="text-align: center; padding-top: 2%; padding-bottom: 2%">Варианты объема продукта:</MudText>
        
        <MudChipSet SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="SelectedVolumes" Ripple="true" CheckMark="true">
            @foreach (var volume in ProductVolumes)
            {
                <MudChip Text="@volume" Variant="Variant.Text" Color="Color.Info">@volume</MudChip>
            }
        </MudChipSet>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Outlined">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="async () => await CreateAsync()">Создать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Action OnSuccess { get; set; } = null!;

    private readonly CreateProductCategoryCommand _command = new() { Name = "" };
    private IReadOnlyCollection<string> SelectedVolumes { get; set; } = new HashSet<string>();
    
    private string[] ProductVolumes =
    {
        "100 Г", "300 Г", "500 Г", "1 Кг", "2 Кг", "3 Кг", "5 Кг", "100 мл", "300 мл",
        "500 мл", "1 Л", "2 Л", "3 Л", "5 Л", "1 шт", "2 шт", "3 шт", "5 шт",
    };

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task CreateAsync()
    {
        if (!string.IsNullOrWhiteSpace(_command.Name))
        {
            if (SelectedVolumes.Count > 5)
            {
                Snackbar.Add("Можно выбрать максимум 5 объемов.", Severity.Warning);
                return;
            }
            if (SelectedVolumes.Count < 4)
            {
                Snackbar.Add("Нужно выбрать минимум 3 объема.", Severity.Warning);
                return;
            }
            if (!CategoryVolumesValidationService.VolumesAreFromOneGroup(SelectedVolumes, out var error))
            {
                Snackbar.Add(error!, Severity.Warning); 
                return;
            }

            _command.ProductVolumes = ProductVolumes
                .Where(v => SelectedVolumes.Contains(v))
                .ToArray();
            var success = await CategoryService.Post(_command);
            if (success)
            {
                MudDialog.Close();
                OnSuccess.Invoke();
                Snackbar.Add($"\"{_command.Name}\" создан!", Severity.Success);
            }
        }
    }
}

<style>
    .category-dialog {
        width: 95%; 
        max-width: 600px; 
    }

    .dialog-title {
        display: flex;
        align-items: center;
        font-weight: 300;
        margin-bottom: 16px;
    }

    .dialog-text-field {
        margin-bottom: 16px;
        width: 100%;
    }
</style>
