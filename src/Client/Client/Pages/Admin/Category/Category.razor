@page "/admin/category"
@using Application.Contract.ProductCategory.Responses
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Category
@using Application.Contract.ProductCategory.Commands
@using Microsoft.AspNetCore.Authorization

@* @attribute [Authorize] *@

@inject IDialogService DialogService
@inject ICategoryService CategoryService

<div style="position: relative; display: flex; align-items: center; margin-bottom: 20px;">
    <h3 style="display: inline-block; margin-right: 20px">Категория товаров</h3>
    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" OnClick="@(async () => await AddAsync())"
               Style="position: absolute; right: 0; bottom: 5px;">
        Добавить
    </MudButton>
</div>

<MudGrid Spacing="1" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @if (_categories != null && _categories.Any())
    {
        foreach (var category in _categories)
        {
            <MudItem xs="12" sm="6" md="4" lg="2">
                <MudCard Style="max-width: 100%; height: 300px; width: 400px; display: flex; flex-direction: column; justify-content: space-between;" Class="product-card" OnClick="@(async () => await EditAsync(category))">
                    <!-- Изображение категории -->
                    @if (!string.IsNullOrEmpty(category.ImageUrl))
                    {
                        <div class="category-image" style="position: relative; height: 350px;">
                            <MudCardMedia Image="@category.ImageUrl" Alt="Image not available" Style="height: 100%; width: 100%; object-fit: cover;"></MudCardMedia>
                            <div class="image-overlay"></div> <!-- Псевдоэлемент для затемнения изображения -->
                            <div class="category-title">
                                @(category.Name.Length > 40 ? category.Name.Substring(0, 40) + "..." : category.Name)
                            </div>
                        </div>
                    }

                    <MudCardContent Style="padding: 5px 0 7px 8px; flex-grow: 1; display: flex; align-items: center; flex-direction: column; justify-content: center;">
                        <!-- Контейнер с кнопками, выровненный по правому краю -->
                        <div style="display: flex; justify-content: flex-end; width: 100%; margin-bottom: 0; margin-right: 0">
                            <MudButton Color="Color.Default" OnClick="@(async () => await EditAsync(category))"
                                       Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px; margin-right: 5px">
                                <MudIcon Icon="@Icons.Material.Filled.Edit"/>
                            </MudButton>

                            <MudButton Color="Color.Error" OnClick="@(async () => await DeleteAsync(category.Slug, category.Name))"
                                       Variant="Variant.Text" Size="Size.Medium" Style="min-width: 50px">
                                <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                            </MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private List<ProductCategoryResponse>? _categories;

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.Get();
        StateHasChanged();
    }

    private async Task AddAsync()
    {
        await DialogService.ShowAsync<CreateCategoryDialog>("", new DialogParameters { { "OnSuccess", new Action(async () => await OnInitializedAsync()) } });
        await OnInitializedAsync();
    }

    private async Task EditAsync(ProductCategoryResponse category)
    {
        UpdateProductCategoryCommand updateCommand = new()
        {
            Name = category.Name,
            Slug = category.Slug,
            BaseCategorySlug = category.BaseCategorySlug,
            ImageUrl = category.ImageUrl
        };

        await DialogService.ShowAsync<EditCategoryDialog>("",
            new DialogParameters
            {
                { "Command", updateCommand },
                { "OnSuccess", new Action(async () => await OnInitializedAsync()) } //This is callback for updating categories list
            });
    }

    private async Task DeleteAsync(string slug, string name)
    {
        var delDialog = await DialogService.ShowAsync<DeleteConfirmation>("",
            new DialogParameters { { "ContentText", $"Вы хотите удалить {name}?" } },
            new DialogOptions { ClassBackground = "dialog-background" });

        var delDialogResult = await delDialog.Result;

        if (delDialogResult.Canceled)
            return;

// Проверка на null перед использованием результата
        if (delDialogResult.Data is bool)
        {
            await CategoryService.Delete(slug);
        }

        await OnInitializedAsync();
    }

}

<style>
    .dialog-background {
        backdrop-filter: blur(10px);
    }

    .product-card {
        transition: transform 0.3s ease; /* Убираем затемнение карточки */
        cursor: pointer; /* Указатель при наведении */
    }

    .product-card:hover {
        transform: scale(1.05);
    }

    .category-image {
        position: relative;
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4); /* Черный цвет с прозрачностью */
        opacity: 0; /* Изначально скрыт */
        transition: opacity 0.3s ease; /* Плавный переход */
    }

    .product-card:hover .image-overlay {
        opacity: 1; /* Показывать при наведении */
    }

    .category-title {
        position: absolute;
        color: white; /* Цвет текста */
        font-size: 25px; /* Размер текста */
        font-weight: 510; /* Неподчеркнутый текст */
        text-align: center; /* Центрирование текста */
        top: 50%; /* Центрирование вертикально */
        left: 50%; /* Центрирование горизонтально */
        transform: translate(-50%, -50%); /* Центрирование текста */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7); /* Тень для лучшей читаемости */
    }
</style>