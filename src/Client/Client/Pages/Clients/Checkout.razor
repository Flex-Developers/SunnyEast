@page "/checkout"
@attribute [Authorize]

@using Application.Contract.Shops.Responses
@using Client.Components.Common
@using Client.Infrastructure.Services.Cart
@using Client.Infrastructure.Services.Cart.Models
@using Client.Infrastructure.Services.Order
@using Client.Infrastructure.Services.Shop
@using Microsoft.AspNetCore.Authorization
@using Severity = MudBlazor.Severity
@inject ICartService CartService
@inject IOrderService OrderService
@inject IShopService ShopService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudStepper @ref="_stepper" HideButtons="true" Elevation="0" Linear="true">

        <!-- 1. Магазин --------------------------------------------------->
        <MudStep Label="Магазин">
            @if (_shops.Count == 0)
            {
                <MudAlert Severity="Severity.Error" Dense="true">
                    Магазины недоступны
                </MudAlert>
            }
            else
            {
                <MudSelect T="string" Label="Выберите магазин" Dense="true" Class="w-100 mb-3"
                           @bind-Value="_shop">
                    @foreach (var s in _shops)
                    {
                        <MudSelectItem Value="@s.Slug">@s.Address</MudSelectItem>
                    }
                </MudSelect>

                @if (_currentShop?.Images?.Length > 0)
                {
                    <MudCarousel TData="string" AutoCycle="false" Height="220px" Class="mb-3">
                        @foreach (var img in _currentShop.Images.Take(5))
                        {
                            <MudImage Src="@img" Alt="@_currentShop.Address"
                                      Style="width:100%;height:100%;object-fit:cover" />
                        }
                    </MudCarousel>
                }

                <MudButton Disabled="@string.IsNullOrEmpty(_shop)"
                           OnClick="_stepper!.NextStepAsync"
                           Color="Color.Primary" Variant="Variant.Filled">
                    Далее
                </MudButton>
            }
        </MudStep>

        <!-- 2. Проверка -------------------------------------------------->
        <MudStep Label="Подтверждение">
            <MudTable Items="_items" Dense="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Товар</MudTh>
                    <MudTh Class="text-right">Кол-во × Цена</MudTh>
                    <MudTh Class="text-right">Сумма</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ProductName</MudTd>

                    <MudTd Class="text-right">
                        @($"{context.Quantity} × {(context.DiscountPrice ?? context.Price):N2} ₽")
                    </MudTd>

                    <MudTd Class="text-right">
                        @($"{(context.DiscountPrice ?? context.Price) * context.Quantity:N2} ₽")
                    </MudTd>

                </RowTemplate>
            </MudTable>

            <MudDivider Class="my-2" />
            <MudText Typo="Typo.h6" Align="Align.Right">Итого: @_total:N2 ₽ </MudText>


            <MudButton Class="mt-3" Color="Color.Primary" Variant="Variant.Filled"
                       Disabled="@(_items.Count == 0)"
                       OnClick="CreateOrder">
                Оформить заказ
            </MudButton>
        </MudStep>

        <!-- 3. Готово ---------------------------------------------------->
        <MudStep Label="Завершено">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-5">
                Спасибо! Ваш заказ создан.
            </MudText>
        </MudStep>

    </MudStepper>
</MudContainer>

@code {
    private MudStepper? _stepper;
    private List<CartItemDto>  _items  = [];
    private List<ShopResponse> _shops  = [];
    private string? _shop;
    private decimal _total;

    private ShopResponse? _currentShop => _shops.FirstOrDefault(s => s.Slug == _shop);

    protected override async Task OnInitializedAsync()
    {
        _items = (await CartService.GetCartAsync())?.Orders ?? [];
        _shops = await ShopService.GetShopsAsync();
        _shop ??= _shops.FirstOrDefault()?.Slug;
        CalcTotal();
    }

    private void CalcTotal() =>
        _total = _items.Sum(i => i.Quantity * (i.DiscountPrice ?? i.Price));

    private async Task CreateOrder()
    {
        var slug = await OrderService.CreateAsync(_shop!, _items);
        if (slug is null)
        {
            Snackbar.Add("Не удалось создать заказ.", Severity.Error);
            return;
        }

        await CartService.ClearAsync();
        await _stepper!.NextStepAsync();
        Snackbar.Add($"Заказ №{slug} оформлен", Severity.Success);
        await Task.Delay(1200);
        Navigation.NavigateTo($"/orders/{slug}");
    }
}
