@page "/cart"
@using Client.Infrastructure.Services.Cart
@using Client.Infrastructure.Services.Cart.Models
@inject ICartService CartService
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Class="p-4">
                @if (_items.Count == 0)
                {
                    <MudEmpty Width="100%" Height="240px" Text="Корзина пуста" Icon="@Icons.Material.Filled.Inventory2" />
                }
                else
                {
                    <MudTable Items="_items" Dense="true" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh>Продукт</MudTh>
                            <MudTh>Объем</MudTh>
                            <MudTh Class="text-center">Кол-во</MudTh>
                            <MudTh Class="text-right">Цена</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudAvatar Size="Size.Medium"/></MudTd>
                            <MudTd>@context.ProductName</MudTd>
                            <MudTd>@context.SelectedVolume</MudTd>
                            <MudTd Class="text-center">
                                <MudNumericField T="int" Immediate="true" HideSpinButtons="true" Min="1" Max="99" Style="width:70px"
                                                 Value="context.Quantity" ValueChanged="@( (int v) => OnQuantityChanged(context, v) )" />
                            </MudTd>
                            <MudTd Class="text-right">@((context.DiscountPrice ?? context.Price) * context.Quantity).ToString("C")</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveItem(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudPaper Class="p-4 sticky-top" Style="top:88px">
                <MudText Typo="Typo.h6" Class="mb-2">Сводка заказа</MudText>
                <div class="d-flex justify-space-between mb-1">
                    <span>Товаров:</span>
                    <span>@_items.Sum(i => i.Quantity)</span>
                </div>
                <div class="d-flex justify-space-between mb-1">
                    <span>Сумма:</span>
                    <span>@_total.ToString("C")</span>
                </div>
                <MudDivider Class="my-2" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(_items.Count==0)">
                    Перейти к оформлению
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<CartItemDto> _items = new();
    private decimal _total;

    protected override async Task OnInitializedAsync()
    {
        CartService.OnChange += CartChanged;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var cart = await CartService.GetCartAsync();
        _items = cart?.Orders ?? [];
        CalculateTotal();
    }

    private void CalculateTotal() => _total = _items.Sum(i => i.Quantity * (i.DiscountPrice ?? i.Price));

    private async Task OnQuantityChanged(CartItemDto item, int newQuantity)
    {
        item.Quantity = newQuantity;
        await CartService.UpdateOrderAsync(item);
        CalculateTotal();
    }

    private async Task RemoveItem(CartItemDto item)
    {
        await CartService.RemoveOrderAsync(item.ProductSlug, item.SelectedVolume);
        _items.Remove(item);
        CalculateTotal();
    }

    private async void CartChanged()
    {
        await LoadAsync();
        StateHasChanged();
    }

    public void Dispose() => CartService.OnChange -= CartChanged;
}