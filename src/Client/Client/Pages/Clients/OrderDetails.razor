@page "/orders/{Slug}"
@attribute [Authorize]
@using Application.Contract.Enums
@using Application.Contract.Order.Responses
@using Client.Components.Common
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Notifications
@using Client.Infrastructure.Services.Order
@using Microsoft.AspNetCore.Authorization
@inject Infrastructure.Realtime.IOrderRealtimeService Realtime
@using Severity = MudBlazor.Severity
@inject IOrderService OrderService
@inject IDialogService Dialogs
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">

    @if (_loading)
    {
        <MudProgressCircular Size="Size.Large" Class="mx-auto mt-6"/>
    }
    else if (_order is null)
    {
        <MudAlert Dense Elevation="0" Severity="Severity.Error"
                  Class="mx-auto mt-6" Style="max-width:400px">
            Заказ не найден
        </MudAlert>
    }
    else
    {
        <MudPaper Elevation="10" Class="pa-4">

            <!-- Заголовок -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudText Typo="Typo.h4">Заказ №@_order.OrderNumber</MudText>
                <MudSpacer/>
                <OrderStatusChip Status="@_order.Status"/>
            </MudStack>

            <MudDivider Class="mt-3 mb-4"/>

            <!-- Сведения -->
            <MudGrid Class="mb-2">

                <MudItem xs="12" sm="6">
                    <MudText Color="Color.Info" Typo="Typo.h5">Магазин:</MudText>
                    <MudText Typo="Typo.h6">@_order.Shop?.Address</MudText>

                    @if (!string.IsNullOrWhiteSpace(_order.Shop?.Images?.FirstOrDefault()))
                    {
                        <MudImage Src="@_order.Shop!.Images!.First()" Alt="shop"
                                  Width="100" Height="100"
                                  Class="rounded object-cover mt-1"/>
                    }
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudText Color="Color.Info" Typo="Typo.h5">Создан:</MudText>
                    <MudText Typo="Typo.h6">@_order.CreatedAt</MudText>
                </MudItem>

                <!-- Комментарий (если есть) -->
                @if (!string.IsNullOrWhiteSpace(_order.CustomerComment))
                {
                    <MudItem xs="12">
                        <MudText Color="Color.Info" Typo="Typo.h5">Комментарий:</MudText>
                        <MudText Typo="Typo.h6">@_order.CustomerComment</MudText>
                    </MudItem>
                }
            </MudGrid>

            <MudDivider Class="my-3"/>

            <!-- Таблица товаров -->
            <MudTable Items="_order.Items" Dense Hover Elevation="0" Breakpoint="Breakpoint.Sm">

                <HeaderContent>
                    <MudTh/>
                    <MudTh>Товар</MudTh>
                    <MudTh>Объём</MudTh>
                    <MudTh Class="text-right">Кол-во × Цена</MudTh>
                    <MudTh Class="text-right">Сумма</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <!-- фото -->
                    <MudTd>
                        <MudImage Src="@(string.IsNullOrWhiteSpace(context.ImageUrl) ? null : context.ImageUrl)"
                                  Alt="@context.ProductName"
                                  Width="60" Height="60"
                                  Class="rounded object-cover"/>
                    </MudTd>

                    <!-- товар -->
                    <MudTd DataLabel="Товар">@context.ProductName</MudTd>

                    <!-- объём -->
                    <MudTd DataLabel="Объём">
                        @if (!string.IsNullOrWhiteSpace(context.Volume))
                        {
                            <MudChip T="string" Variant="Variant.Outlined"
                                     Color="Color.Primary">@context.Volume</MudChip>
                        }
                        else
                        {
                            <span>—</span>
                        }
                    </MudTd>

                    <!-- количество × цена -->
                    <MudTd DataLabel="Кол-во × Цена" Class="text-right nowrap">
                        @($"{context.Quantity} × {context.UnitPrice:N2} ₽")
                    </MudTd>

                    <!-- сумма -->
                    <MudTd DataLabel="Сумма" Class="text-right">
                        @($"{context.SummaryPrice:N2} ₽")
                    </MudTd>
                </RowTemplate>

            </MudTable>

            <MudDivider Class="my-3"/>

            <!-- Итог -->
            <MudText Typo="Typo.h6">
                @($"Итого: {_order.Sum:N2} ₽")
            </MudText>

            <!-- Информация о выдаче / отмене -->
            @if (_order.CanceledAt is not null)
            {
                <MudAlert Dense Severity="Severity.Error" Class="mt-2">
                    Заказ отменён: @_order.CanceledAt.Value.ToLocalTime()
                </MudAlert>
            }
            else if (_order.ClosedAt is not null)
            {
                <MudAlert Dense Severity="Severity.Success" Class="mt-2">
                    Заказ выдан: @_order.ClosedAt.Value.ToLocalTime()
                </MudAlert>
            }

            @if (_order.Status is OrderStatus.Submitted or OrderStatus.InProgress or OrderStatus.Ready)
            {
                <MudDivider Class="my-3"/>

                <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                           @onclick="() => AskCancel(_order)">
                    Отменить
                </MudButton>
            }

        </MudPaper>
    }
</MudContainer>

@code {

    [Parameter]
    public string Slug { get; set; } = null!;

    [Inject]
    private INotificationManager NotificationManager { get; set; } = null!;

    private OrderResponse? _order;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _order = await OrderService.GetAsyncBySlug(Slug);
        _loading = false;

        Realtime.OnOrderStatusChanged += OnStatusChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !await NotificationManager.IsEnabledAsync())
        {
            await NotificationManager.EnableNotificationsAsync();
        }
    }

    private async Task AskCancel(OrderResponse order)
    {
        var dialogParameters = new DialogParameters { ["Content"] = order.OrderNumber };
        var dialogReference = await Dialogs.ShowAsync<CancelConfirmation>("Отмена заказа", dialogParameters);
        if (!(await dialogReference.Result)!.Canceled)
            await CancelOrder(order);
    }

    private async Task CancelOrder(OrderResponse order)
    {
        if (await OrderService.CancelOwnAsync(order.Slug))
        {
            _order = await OrderService.GetAsyncBySlug(order.Slug);
            Snackbar.Add($"Заказ {order.OrderNumber} отменён", Severity.Success);
        }
        else
            Snackbar.Add($"Не удалось отменить {order.OrderNumber}", Severity.Warning);


        StateHasChanged();
    }

    private void OnStatusChanged(OrderResponse order)
    {
        if (_order?.Slug == order.Slug)
        {
            _order = order;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        Realtime.OnOrderStatusChanged -= OnStatusChanged;
    }

}

<style>
    @@media (max-width: 600px) {
        .mud-table-cell[data-label]::before {
            content: attr(data-label);
            display: block;
            font-size: .80rem;
            font-weight: 500;
            margin-bottom: 4px;
        }
    }

    @@media (min-width: 601px) {
        .mud-table-cell[data-label]::before {
            content: none;
        }
    }

    .object-cover {
        object-fit: cover;
    }
</style>
