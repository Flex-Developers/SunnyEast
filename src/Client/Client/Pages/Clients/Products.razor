@page "/Products"
@using Application.Contract.Product.Queries
@using Application.Contract.Product.Responses
@using Application.Contract.ProductCategory.Responses
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Cart.Models
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Product
@using Severity = MudBlazor.Severity
@using Client.Components.Common
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Client.Infrastructure.Services.Cart.ICartService CartService


<ProductToolBar
    Categories="@_categories"
    SelectedCategory="@SelectedCategory"
    SelectedCategoryChanged="@(cat => OnCategoryChanged(cat))"
    SearchTerm="@SearchTerm"
    SearchTermChanged="@(txt => SearchTerm = txt)"/>


<MudGrid Spacing="3" Justify="Justify.FlexStart" Style="margin-top:3px;margin-bottom:50px">
    @foreach (var product in _products)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="3" Class="product-card">

                <!-- Карусель изображений -->
                <MudCarousel Style="height:290px;border-radius:10px"
                             ItemsSource="product.Images"
                             Context="img"
                             EnableSwipeGesture AutoCycle
                             BulletsPosition="Position.Bottom"
                             ShowBullets="false"
                             ShowArrows="@(product.Images?.Length > 1 && product.Images[0].StartsWith("http"))">
                    <ItemTemplate>
                        <MudCardMedia Image="@img"/>
                    </ItemTemplate>
                </MudCarousel>

                <MudCardContent Class="card-content">
                    <!-- название -->
                    <MudText Typo="Typo.body1" Class="product-name">
                        @(product.Name.Length > 100 ? product.Name[..100] + "…" : product.Name)
                    </MudText>

                    <!-- выбор объёма -->
                    <MudChipSet T="string"
                                SelectionMode="SelectionMode.SingleSelection"
                                SelectedValue="product.SelectedVolume"
                                SelectedValueChanged="v => OnVolumeChanged(product, v)"
                                Ripple
                                Style="margin-bottom:20%;margin-left:-5px">
                        @foreach (var vp in product.Prices)
                        {
                            <MudChip Text="@vp.Volume" Value="@vp.Volume"
                                     Color="Color.Primary" Variant="Variant.Text"/>
                        }
                    </MudChipSet>

                    @{
                        var vp = product.Prices
                                         .FirstOrDefault(x => x.Volume == product.SelectedVolume)
                                     ?? product.Prices.First();
                    }
                    <div class="discount-container">
                        <MudText Typo="Typo.body1">Цена:&nbsp;</MudText>

                        @if (vp.Discount is not null)
                        {
                            <MudText Typo="Typo.h6" Class="discounted-price">@($"{vp.Discount:N2}")</MudText>
                            <MudText Typo="Typo.body2" Class="price">@($"{vp.Full:N2}")</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1" Style="margin-left:5px">@($"{vp.Full:N2}")</MudText>
                        }
                    </div>


                    <!-- количество + кнопка «в корзину» -->
                    <div class="buttons-container">
                        <div class="counter-controls">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary"
                                           Disabled="@(product.Quantity <= 1)"
                                           OnClick="@(() => DecreaseQuantity(product))"/>
                            <MudText Typo="Typo.body1" Class="quantity-text">@product.Quantity</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary"
                                           OnClick="@(() => IncreaseQuantity(product))"/>
                        </div>

                        <MudButton Variant="Variant.Filled"
                                   Color="@(IsInCart(product) ? Color.Error : Color.Info)"
                                   Size="Size.Small"
                                   Disabled="false"
                                   Class="button"
                                   OnClick="@(async () => await ToggleCart(product))">

                            @if (IsInCart(product))
                            {
                                <MudIcon Icon="@Icons.Material.Filled.RemoveShoppingCart" Class="cart-icon"/>
                                <span style="margin-left:6px">Убрать</span>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="cart-icon"/>
                                <span style="margin-left:6px">В корзину</span>
                            }
                        </MudButton>

                    </div>

                    <div class="description-container">
                        <MudLink Typo="Typo.body2" OnClick="@(() => OpenDescriptionAsync(product))">
                            Читать описание…
                        </MudLink>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private List<ProductResponse> _products = new();
    private List<ProductCategoryResponse> _categories = new();
    private HashSet<string> _cartKeys = new();
    private string? _searchTerm;
    private List<ProductResponse> _allProducts = new();
    [Parameter] public string SelectedCategory { get; set; } = string.Empty;

    private bool _isSearchOpen;

    private void ToggleSearch()
    {
        _isSearchOpen = !_isSearchOpen;
    }

    private string? SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            ApplySearch(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _categories = (await CategoryService.Get())!;
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var cat = System.Web.HttpUtility.ParseQueryString(uri.Query)["category"];
        SelectedCategory = cat ?? await LoadSelectedCategoryAsync();
        CartService.OnChange += SyncCart;

        await LoadProductsAsync(SelectedCategory);
        await LoadCartStateAsync();
    }

    private async void SyncCart()
    {
        await LoadCartStateAsync();
        StateHasChanged();
    }

    private async Task IncreaseQuantity(ProductResponse p)
    {
        p.Quantity = Math.Min(p.Quantity + 1, 99);

        if (IsInCart(p))
            await PushQuantityToCart(p);
    }

    private async Task DecreaseQuantity(ProductResponse p)
    {
        p.Quantity = Math.Max(p.Quantity - 1, 1);

        if (IsInCart(p))
            await PushQuantityToCart(p);
    }

    private async Task PushQuantityToCart(ProductResponse p)
    {
        var price = p.Prices.First(x => x.Volume == p.SelectedVolume);

        await CartService.UpdateOrderAsync(new CartItemDto
        {
            ProductSlug = p.Slug,
            ProductName = p.Name,
            SelectedVolume = price.Volume,
            Quantity = p.Quantity, // ← только это реально меняется
            Price = price.Full!.Value,
            DiscountPrice = price.Discount,
            ImageUrl = p.Images?.FirstOrDefault()
        });
    }

    private void OnVolumeChanged(ProductResponse p, string? vol)
    {
        if (string.IsNullOrWhiteSpace(vol) || vol == p.SelectedVolume)
            return;

        p.SelectedVolume = vol;

        var vp = p.Prices.FirstOrDefault(x => x.Volume == vol);
        p.Price = vp!.Full ?? 0m;
        p.DiscountPrice = vp.Discount;

        StateHasChanged();
    }

    private async Task ToggleCart(ProductResponse p)
    {
        if (IsInCart(p))
        {
            await CartService.RemoveOrderAsync(p.Slug, p.SelectedVolume);
            _cartKeys.Remove($"{p.Slug}|{p.SelectedVolume}");
            Snackbar.Add("Удалено из корзины", Severity.Info);
        }
        else
        {
            await AddToCart(p); // старый метод остаётся без изменений
        }
    }


    private async Task AddToCart(ProductResponse p)
    {
        var volumePrice = p.Prices.First(x => x.Volume == p.SelectedVolume);

        var dto = new CartItemDto
        {
            ProductSlug = p.Slug,
            ProductName = p.Name,
            SelectedVolume = volumePrice.Volume,
            Quantity = p.Quantity,
            Price = volumePrice.Full!.Value,
            DiscountPrice = volumePrice.Discount,
            ImageUrl = p.Images?.FirstOrDefault()
        };

        await CartService.CreateOrderAsync(dto);
        _cartKeys.Add($"{dto.ProductSlug}|{dto.SelectedVolume}");
        Snackbar.Add($"Добавлено: {p.Name}, {p.Quantity} × {p.SelectedVolume}", Severity.Success);
    }

    private bool IsInCart(ProductResponse p) => _cartKeys.Contains($"{p.Slug}|{p.SelectedVolume}");

    private async Task LoadCartStateAsync()
    {
        var cart = await CartService.GetCartAsync();
        _cartKeys = cart?.Orders?.Select(o => $"{o.ProductSlug}|{o.SelectedVolume}").ToHashSet() ?? new();
    }

    private async Task OnCategoryChanged(string v)
    {
        SelectedCategory = v;
        SearchTerm = null;
        await LoadProductsAsync(v);
        StateHasChanged();
    }

    private void ApplySearch(string? term)
    {
        if (string.IsNullOrWhiteSpace(term))
        {
            _products = _allProducts.ToList();
        }
        else
        {
            _products = _allProducts
                .Where(p => p.Name.Contains(term, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }

    private async Task LoadProductsAsync(string category)
    {
        if (string.IsNullOrEmpty(category))
            return;

        var result = category == "Все продукты"
            ? await ProductService.Get(new GetProductsQuery())
            : await ProductService.GetByCategoryName(category);

        foreach (var p in result)
        {
            if (p.ProductVolumes?.Length > 0)
                p.SelectedVolume = p.ProductVolumes[0];

            OnVolumeChanged(p, p.SelectedVolume);
        }

        _allProducts = result;

        if (string.IsNullOrWhiteSpace(_searchTerm))
            _products = _allProducts.ToList();
        else
            ApplySearch(_searchTerm);

        await LocalStorage.SetItemAsync("selectedCategory", category);
    }

    private async Task<string> LoadSelectedCategoryAsync()
    {
        var selected = await LocalStorage.GetItemAsync<string>("selectedCategory");

        if (!string.IsNullOrWhiteSpace(selected))
        {
            foreach (var category in _categories)
                if (category.Name == selected)
                    return selected;
        }

        foreach (var category in _categories)
            if (category.Name == "Все продукты")
                return category.Name;

        Snackbar.Add("Категория по умолчанию 'Все продукты' не найдена.", Severity.Info);
        return string.Empty;
    }


    private async Task OpenDescriptionAsync(ProductResponse p)
    {
        await DialogService.ShowAsync<ProductDescriptionDialog>("",
            new DialogParameters { { "ContentText", p.Description }, { "ProductName", p.Name } });
    }

    public void Dispose()
    {
        CartService.OnChange -= SyncCart;
    }

}

<style>

    .product-card {
        position: relative;
        border-radius: 10px;
        max-width: 100%;
        height: 600px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        transition: box-shadow 0.3s ease, border 0.3s ease;
        z-index: 1;
        border: 1px solid transparent;
    }

    .product-card:hover {
        border: 1px solid #019934;
        box-shadow: 0 0 6px rgba(25, 118, 210, 0.3);
    }

    .card-content {
        padding: 0 0 0 8px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: 0;
    }

    .product-name {
        margin: 0;
        white-space: normal;
        word-wrap: break-word;
        line-height: 1.5;
        flex: 1;
    }

    .discount-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-top: -50px;
        margin-bottom: 90px
    }

    .discounted-price {
        margin-left: 5px;
        color: red;
    }

    .price {
        margin-left: auto;
        margin-right: 15px;
        text-decoration: line-through;
        font-size: larger;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .description-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .buttons-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: -60px 10px 30px;
    }

    .counter-controls {
        display: flex;
        align-items: center;
        gap: 2px;
        margin-left: -20px;
    }

    .quantity-text {
        min-width: 20px;
        text-align: center;
    }

    .button {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-radius: 25px;
    }

    .cart-icon {
        font-size: 20px;
    }

</style>