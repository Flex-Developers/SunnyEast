@page "/Products"
@using Application.Contract.Product.Queries
@using Application.Contract.Product.Responses
@using Application.Contract.ProductCategory.Responses
@using Client.Components.Dialogs
@using Client.Infrastructure.Services.Cart.Models
@using Client.Infrastructure.Services.Category
@using Client.Infrastructure.Services.Product
@using Client.Infrastructure.Services.Price
@using Severity = MudBlazor.Severity
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Client.Infrastructure.Services.Cart.ICartService CartService
@inject IPriceCalculatorService PriceCalculator

<MudPaper Elevation="25">
    <MudToolBar>
        <MudSelect T="string" Label="Категория" Style="margin-right: 15px;"
                   Value="@SelectedCategory" ValueChanged="@(async (string v)=>await OnCategoryChanged(v))">
            @foreach (var c in _categories)
            {
                <MudSelectItem Value="@c.Name">@c.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSpacer/>

        <MudAutocomplete T="ProductResponse" SearchFunc="SearchAsync" ToStringFunc="@(r=>r.Name)"
                         ResetValueOnEmptyText Immediate Clearable Label="Поиск"
                         DebounceInterval="300" AdornmentIcon="@Icons.Material.Filled.Search"
                         Class="autocomplete"/>

        @if (IsSearching)
        {
            <MudProgressCircular Indeterminate Size="Size.Medium" Class="ml-2"/>
        }
    </MudToolBar>
</MudPaper>

<MudGrid Spacing="3" Justify="Justify.FlexStart" Style="margin-top: 3px; margin-bottom: 50px">
    @foreach (var product in _products)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Class="product-card">

                <MudCarousel Style="height: 290px; border-radius: 10px;"
                             ItemsSource="@product.Images"
                             Context="imgContext"
                             EnableSwipeGesture AutoCycle
                             BulletsPosition="Position.Bottom"
                             ShowBullets="false"
                             ShowArrows="@(product.Images != null && product.Images.Length > 1 && product.Images[0].StartsWith("http"))">
                    <ItemTemplate><MudCardMedia Image="@imgContext"/></ItemTemplate>
                </MudCarousel>

                <MudCardContent Class="card-content">
                    <MudText Typo="Typo.body1" Class="product-name">
                        @(product.Name.Length > 100 ? product.Name[..100] + "…" : product.Name)
                    </MudText>

                    <MudChipSet T="string?" SelectionMode="SelectionMode.SingleSelection" SelectedValue="product.SelectedVolume"
                                SelectedValueChanged="@(v => OnVolumeChanged(product, v))" Ripple="true"
                                Style="margin-bottom: 20%; margin-left:-5px">

                        @foreach (var v in product.ProductVolumes ?? [])
                        {
                            <MudChip Text="@v" Value="@v" Variant="Variant.Text" Color="Color.Primary">@v</MudChip>
                        }
                    </MudChipSet>


                    <div class="discount-container">
                        <MudText Typo="Typo.body1">Цена:&nbsp;</MudText>

                        @if (product.DiscountPrice is not null)
                        {
                            <MudText Typo="Typo.h6" Class="discounted-price">@($"{product.DiscountPrice:N2}")</MudText>
                            <MudText Typo="Typo.body2" Class="price">@($"{product.Price:N2}")</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1" Style="margin-left:5px">@($"{product.Price:N2}")</MudText>
                        }
                    </div>

                    <div class="buttons-container">
                        <div class="counter-controls">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary"
                                           Disabled="@(product.Quantity<=1)" OnClick="@(()=>DecreaseQuantity(product))"/>
                            <MudText Typo="Typo.body1" Class="quantity-text">@product.Quantity</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary"
                                           OnClick="@(()=>IncreaseQuantity(product))"/>
                        </div>

                        <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" 
                                   Disabled="@IsInCart(product)" OnClick="@(async () => await AddToCart(product))" Class="button">
                            @if (IsInCart(product))
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Class="cart-icon" />
                                <span style="margin-left: 6px;">В корзине</span>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="cart-icon" />
                                <span style="margin-left: 6px;">В корзину</span>
                            }
                        </MudButton>
                    </div>

                    <div class="description-container">
                        <MudLink Typo="Typo.body2" OnClick="@(()=>OpenDescriptionAsync(product))">
                            Читать описание…
                        </MudLink>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private List<ProductResponse> _products = new();
    private List<ProductCategoryResponse> _categories = new();
    private readonly GetProductsQuery _query = new();
    private readonly Dictionary<string, decimal> _basePrice = new(); // минимальная (без скидки) цена
    private HashSet<string> _cartKeys = new();
    private bool IsSearching;

    [Parameter] public string SelectedCategory { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await CategoryService.Get())!;
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var cat = System.Web.HttpUtility.ParseQueryString(uri.Query)["category"];
        SelectedCategory = cat ?? await LoadSelectedCategoryAsync();

        await LoadProductsAsync(SelectedCategory);
        await LoadCartStateAsync();
    }

    private void IncreaseQuantity(ProductResponse p) => p.Quantity = Math.Min(p.Quantity + 1, 99);
    
    private void DecreaseQuantity(ProductResponse p) => p.Quantity = Math.Max(p.Quantity - 1, 1);

    private void OnVolumeChanged(ProductResponse p, string? vol)
    {
        if (string.IsNullOrWhiteSpace(vol) || p.ProductVolumes is null) return;

        p.SelectedVolume = vol;

        var fullRow = PriceCalculator
                      .GetPrices(p.ProductVolumes, _basePrice[p.Slug], null)
                      .First(x => x.Volume == vol);

        var fullPrice = fullRow.Price!.Value;

        if (p.DiscountPercentage is > 0)
        {
            var discRow = PriceCalculator
                          .GetPrices(p.ProductVolumes, _basePrice[p.Slug], p.DiscountPercentage)
                          .First(x => x.Volume == vol);

            p.Price         = fullPrice;      
            p.DiscountPrice = discRow.Price; 
        }
        else
        {
            p.Price = fullPrice;
            p.DiscountPrice = null;
        }

        StateHasChanged();
    }

    private async Task AddToCart(ProductResponse p)
    {
        var fullRow = PriceCalculator
                      .GetPrices(p.ProductVolumes!, _basePrice[p.Slug], null)
                      .First(x => x.Volume == p.SelectedVolume);

        var fullPrice = fullRow.Price!.Value;
        var discPrice = p.DiscountPercentage is > 0
            ? PriceCalculator.GetPrices(p.ProductVolumes!, _basePrice[p.Slug], p.DiscountPercentage)
                             .First(x => x.Volume == p.SelectedVolume).Price
            : null;

        var dto = new CartItemDto
        {
            ProductSlug    = p.Slug,
            ProductName    = p.Name,
            SelectedVolume = p.SelectedVolume,
            Quantity       = p.Quantity,
            Price          = fullPrice,
            DiscountPrice  = discPrice,
            ImageUrl       = p.Images?.FirstOrDefault()
        };

        await CartService.CreateOrderAsync(dto);
        _cartKeys.Add($"{dto.ProductSlug}|{dto.SelectedVolume}");
        Snackbar.Add($"Добавлено: {p.Name}, {p.Quantity} × {p.SelectedVolume}", Severity.Success);
    }

    private bool IsInCart(ProductResponse p) => _cartKeys.Contains($"{p.Slug}|{p.SelectedVolume}");

    private async Task LoadCartStateAsync()
    {
        var cart = await CartService.GetCartAsync();
        _cartKeys = cart?.Orders?.Select(o => $"{o.ProductSlug}|{o.SelectedVolume}").ToHashSet() ?? new();
    }

    private async Task OnCategoryChanged(string v)
    {
        SelectedCategory = v;
        await LoadProductsAsync(v);
    }

    private async Task<IEnumerable<ProductResponse>> SearchAsync(string text, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(text)) return [];
        IsSearching = true;
        _query.Name = text;
        var res = await ProductService.Get(_query);
        IsSearching = false;
        return res;
    }

    private async Task LoadProductsAsync(string category)
    {
        if (string.IsNullOrEmpty(category)) 
            return;

        if (category == "Все продукты")
            _products = await ProductService.Get(new GetProductsQuery());
        else
            _products = await ProductService.GetByCategoryName(category);

        foreach (var p in _products)
        {
            if (p.ProductVolumes?.Length > 0)
                p.SelectedVolume = p.ProductVolumes[0];

            _basePrice[p.Slug] = p.Price;                   // запоминаем минимальную

            OnVolumeChanged(p, p.SelectedVolume);           // выставляем актуальную цену
        }

        await LocalStorage.SetItemAsync("selectedCategory", category);
    }

    private async Task<string> LoadSelectedCategoryAsync()
    {
        var c = await LocalStorage.GetItemAsync<string>("selectedCategory");
        return (_categories.Any(x => x.Name == c) ? c : string.Empty)!;
    }

    private async Task OpenDescriptionAsync(ProductResponse p)
    {
        await DialogService.ShowAsync<ProductDescriptionDialog>("",
            new DialogParameters { { "ContentText", p.Description }, { "ProductName", p.Name } });
    }
}

<style>

    .autocomplete {
        width: calc(100% - 1px);
        margin-right: -200px;
    }

    .product-card {
        position: relative;
        border-radius: 10px;
        max-width: 100%;
        height: 600px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        transition: box-shadow 0.3s ease, border 0.3s ease;
        z-index: 1;
        border: 1px solid transparent;
    }

    .product-card:hover {
        border: 1px solid green; 
        box-shadow: 0 0 6px rgba(25, 118, 210, 0.3);
    }

    .card-content {
        padding: 0 0 0 8px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: 0px;
    }

    .product-name {
        margin: 0;
        white-space: normal;
        word-wrap: break-word;
        line-height: 1.5;
        flex: 1;
    }

    .discount-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-top: -50px;
        margin-bottom: 90px
    }

    .discounted-price {
        margin-left: 5px;
        color: red;
    }

    .price {
        margin-left: auto;
        margin-right: 15px;
        text-decoration: line-through;
        font-size: larger;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .description-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .buttons-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: -60px 10px 30px;
    }

    .counter-controls {
        display: flex;
        align-items: center;
        gap: 2px;
        margin-left: -20px;
    }

    .quantity-text {
        min-width: 20px;
        text-align: center;
    }

    .button {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-radius: 25px;
    }

    .cart-icon {
        font-size: 20px;
    }
    
</style>